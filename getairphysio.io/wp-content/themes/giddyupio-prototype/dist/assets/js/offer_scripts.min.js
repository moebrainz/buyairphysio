"use strict";
function getUrlVars() {
  for (
    var e,
      t = [],
      i = window.location.href
        .slice(window.location.href.indexOf("?") + 1)
        .split("&"),
      n = 0;
    n < i.length;
    n++
  )
    (e = i[n].split("=")), t.push(e[0]), (t[e[0]] = e[1]);
  return t;
}
function _toConsumableArray(e) {
  if (Array.isArray(e)) {
    for (var t = 0, i = Array(e.length); t < e.length; t++) i[t] = e[t];
    return i;
  }
  return Array.from(e);
}
function createReport() {
  var e = [];
  gu_checkout.cart.forEach(function (t) {
    var i = {
        priceInfo: t.tags,
        productId: t.product_id,
        productTitle: t.name,
        quantity: t.qty,
        sku: t.sku,
        variantId: t.variant_id,
        variantName: t.name,
        variantTitle: t.name,
      },
      n = void 0,
      a = "Products",
      o = "Other Products",
      r = t.type;
    if (void 0 !== t.bundle_id)
      switch (t.type) {
        case "bundle":
          for (
            var s = 0, l = componentOffer.bundle_info.length, d = 0;
            d < componentOffer.bundle_info.length;
            d++
          )
            if (componentOffer.bundle_info[d].bundle_slug === t.bundle_id) {
              s = d + 1;
              break;
            }
          a = "offer-" + l + "-bundle-" + s;
          break;
        case "presell":
          a = "presell";
          break;
        case "presell popup":
          a = "presell-popup-1";
          break;
        default:
          a = "other";
      }
    switch (t.type) {
      case "bundle":
        o = t.bundle_name;
        break;
      case "presell":
        o = "Presell";
        break;
      case "presell popup":
        o = "Presell Popup";
        break;
      default:
        o = "Other Products";
    }
    if (
      (e.forEach(function (e) {
        e.type === r && (n = !0);
      }),
      n)
    ) {
      var c = 0;
      try {
        c = e.findIndex(function (e) {
          return e.type === r;
        });
      } catch (u) {
        for (var p = 0; p < e.length; ++p)
          if (e[p].type === r) {
            c = p;
            break;
          }
      }
      e[c].lineItems.push(i);
    } else e.push({ id: a, name: o, lineItems: [i], quantity: 1, type: r });
  });
  for (var t = "", i = "", n = 0; n < e.length; n++) {
    (t += e[n].name + ";;;"),
      (t += e[n].id + ";;;"),
      (t += e[n].quantity + ";;;"),
      (t += e[n].type + ";");
    for (var a = 0; a < e[n].lineItems.length; a++)
      (t += ";;"),
        (t += e[n].lineItems[a].productId + ";"),
        (t += e[n].lineItems[a].variantName + ";"),
        (t += e[n].lineItems[a].variantId + ";"),
        (t += e[n].lineItems[a].quantity + ";"),
        (t += e[n].lineItems[a].priceInfo.tp + ";"),
        (t += e[n].lineItems[a].priceInfo.rp + ";"),
        (t += e[n].lineItems[a].priceInfo.wp + ";"),
        (t += e[n].lineItems[a].productTitle + ";"),
        (t += e[n].lineItems[a].sku ? e[n].lineItems[a].sku : "NoSku");
    (i += e[n].type + ":" + e[n].name + ";quantity:" + e[n].quantity),
      n != e.length - 1 &&
        (";" === t.slice(-1) && (t = t.slice(0, -1)),
        (t += ";;;;"),
        (i += ";"));
  }
  var o = { selectedUnits: t, gu_bundles: i };
  return o;
}
function startCheckout(e) {
  gu_checkout.startCheckout(e);
}
function initGalleries() {
  $(function () {
    $(".gallery-container").trigger("init");
  });
}
function showUpsellPopUp(e) {
  var t = $("#" + e + ".upsell-popup .popup-image"),
    i = $("#" + e + ".upsell-popup .popup-image img"),
    n = t.find("img").attr("src"),
    a = t.find("img").attr("data-cfsrc"),
    o = void 0;
  if (((o = a ? a : n), gu_vs.check() !== !1))
    if ("variety" !== gu_vs.data()) {
      var r = /.+\/1-[a-zA-Z].+\.(png|jpg)/g,
        s = n.split(".").pop();
      if (r.test(o)) {
        var l = gu_vs.data(),
          d = o.match(/.+\/1-/gi)[0];
        if (2 === l.split(/\W+/).length) {
          var c = l.trim().split(/\s+/).join("-");
          l = c;
        }
        "png" === s
          ? ((o = d + l + ".png"), t.find("img").attr("src", o))
          : ((o = d + l + ".jpg"), t.find("img").attr("src", o));
      }
    } else i.attr("src", o);
}
function _toConsumableArray(e) {
  if (Array.isArray(e)) {
    for (var t = 0, i = Array(e.length); t < e.length; t++) i[t] = e[t];
    return i;
  }
  return Array.from(e);
}
function getBrandConfig(e) {
  var t = new XMLHttpRequest();
  "en" === gu_language && "us" === gu_country
    ? t.open(
        "GET",
        "https://9xuzl3lle5.execute-api.us-west-2.amazonaws.com/prod/offers/v20-" +
          e +
          "-domestic/web-config",
        !0
      )
    : t.open(
        "GET",
        "https://9xuzl3lle5.execute-api.us-west-2.amazonaws.com/prod/offers/v20-" +
          e +
          "-intl/web-config",
        !0
      ),
    (t.responseType = "json"),
    (t.onreadystatechange = function () {
      4 == t.readyState &&
        (t.status < 300 && t.status >= 200
          ? t.response &&
            ("TRUE" === t.response.isdefault
              ? (console.log(
                  "got old default config, fetch new default config"
                ),
                getBrandConfig("default"))
              : bannerLoader(t.response))
          : console.log("Brand config failed to load"));
    }),
    t.send(JSON.stringify({}));
}
function bannerLoader(e) {
  var t = gu_qs.gubn,
    i = gu_qs.gunt,
    n = null,
    a = null,
    o = "#2C2C2C",
    r = "#B52E25",
    s = "0" === i || "TRUE" != e.countdownenabled ? "none" : "block",
    l = e.bannerend;
  if (
    "TRUE" === e.bannerenabled &&
    getTimeRemaining(e.bannerstart).total < 0 &&
    getTimeRemaining(l).total > 0 &&
    "0" !== t
  ) {
    e.followupbannerstart &&
      getTimeRemaining(e.followupbannerstart).total > 0 &&
      (l = e.followupbannerstart),
      e.followupbannerstart && getTimeRemaining(e.followupbannerstart).total < 0
        ? ((n = e.followupbannerheadline1),
          (a = e.followupbannerheadline2),
          (o = o =
            e.followupbannerbgcolor
              ? e.followupbannerbgcolor
              : e.bannerbgcolor),
          (r = r =
            e.followupbannertimerbgcolor
              ? e.followupbannertimerbgcolor
              : e.bannerbgcolor))
        : ((n = e.bannerheadline1),
          (a = e.bannerheadline2),
          (o = e.bannerbgcolor),
          (r = e.bannertimerbgcolor));
    var d = null === a || "null" === a ? "none" : "block",
      c = document.createElement("div");
    c.innerHTML =
      "<div id='holidayBanner' style='color: " +
      lightOrDark(o) +
      "; text-align: center; padding: 20px 20px 15px 20px !important; background-color: " +
      o +
      "; display: none; position: relative; z-index: 1001;'>                <span id='bannerHeadline' style='font-size: 28px; font-family: Arial; display: block; padding-right: 5px;'>                    <strong>" +
      guSubstituteString(n) +
      "</strong>                     <br/>                    <strong style='font-size: 0.75em;display:" +
      d +
      "'>" +
      guSubstituteString(a) +
      "</strong>                 </span>                <span style='font-size: 16px; display: " +
      s +
      "; padding: 0px 5px 5px 5px; font-weight: bold; max-width: 282px; background: " +
      r +
      "; margin: 10px auto !important; border-radius: 2px; -webkit-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.35); -moz-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.35); box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.35); color: " +
      lightOrDark(r) +
      "; letter-spacing: 1.45px; font-weight: 700;' id='bannerSubHead'>                </span>\t\t    </div>";
    var u = getTimeRemaining(l),
      p = document.getElementById("main-wrapper");
    u.total > 0 &&
      (p.insertBefore(c, p.firstChild), initializeClock("bannerSubHead", l)),
      setTimeout(function () {
        jQuery("#holidayBanner").slideDown(),
          jQuery("#yoHolder").css("z-index", 100);
      }, 1e3);
  }
}
function initializeClock(e, t) {
  var i = document.getElementById(e),
    n = setInterval(function () {
      var e = getTimeRemaining(t);
      (i.innerHTML =
        '<div style="font-size:30px; padding: 0px 3px; margin: -5px 0;"><span>' +
        e.days +
        " : " +
        e.hours +
        " : " +
        e.minutes +
        " : " +
        e.seconds +
        '</span></div>\t    \t          <div style="font-size:13px; letter-spacing: 1.2px;"><span> DAYS <span style="padding:0px 10px;">-</span> HRS <span style="padding:0px 10px;">-</span> MINS <span style="padding:0px 10px;">-</span> SEC</span></div>'),
        e.total <= 0 && clearInterval(n);
    }, 1e3);
}
function getTimeRemaining(e) {
  var t = new Date(e);
  t = t.getTime() + 60 * t.getTimezoneOffset() * 1e3;
  var i = t - Date.now(),
    n = Math.floor((i / 1e3) % 60),
    a = Math.floor((i / 1e3 / 60) % 60),
    o = Math.floor((i / 36e5) % 24),
    r = Math.floor(i / 864e5);
  return (
    r < 10 && (r = "0" + r),
    o < 10 && (o = "0" + o),
    a < 10 && (a = "0" + a),
    n < 10 && (n = "0" + n),
    { total: i, days: r, hours: o, minutes: a, seconds: n }
  );
}
function lightOrDark(e) {
  var t = void 0,
    i = void 0,
    n = void 0,
    a = void 0;
  e = e.replace(/[^0-9A-F]/gi, "");
  var o = parseInt(e, 16);
  return (
    (t = (o >> 16) & 255),
    (i = (o >> 8) & 255),
    (n = 255 & o),
    (a = Math.sqrt(0.299 * (t * t) + 0.587 * (i * i) + 0.114 * (n * n))),
    a > 127.5 ? "#333" : "white"
  );
}
function replaceTokens(rawPhrase) {
  var regex = /\[\[(.*?)\]\]/,
    token = rawPhrase.match(regex)[1];
  try {
    var result = eval(token),
      newPhrase = rawPhrase.replace(regex, result);
    return newPhrase;
  } catch (e) {
    return !1;
  }
}
var cleanSelector = function (e) {
  return (
    (e.match(/(#[0-9][^\s:,]*)/g) || []).forEach(function (t) {
      e = e.replace(t, '[id="' + t.replace("#", "") + '"]');
    }),
    e
  );
};
if ("undefined" != typeof gu_qs.guoffer) {
  var activeOfferName = window.gu_qs.guoffer;
  if (
    (console.log("is this working", window.gu_qs.guoffer),
    activeOfferName && $(".additional-offer-container").length)
  ) {
    $("#offer").hide(), $("#" + activeOfferName).show();
    var currentUrl = window.location.href,
      additional_offer = "#" + activeOfferName,
      cleanoffername = cleanSelector(additional_offer),
      bundleClass = ".bundle",
      bundles = cleanoffername + " " + bundleClass,
      objectBundleName = $(cleanoffername).data("offername"),
      extras = ".extras",
      quantity_el = ".qty",
      ribbon_el = ".ribbon",
      ribbonTxt_el = "h6",
      qtyActivator = ".qtyActivator",
      selectedClass = "selected",
      checkmark = ".checkbox input",
      multi_bundleData = componentAdditionalOffer[objectBundleName],
      bundleNumber = 0;
    if (void 0 !== multi_bundleData) {
      window.mobileDevice =
        (window.innerWidth > 0 ? window.innerWidth : screen.width) <= 767;
      for (
        var variant_type =
            void 0 !== multi_bundleData[0]
              ? multi_bundleData[0].bundle_object[0].bundle_variant_info
                  .options[0].name
              : "",
          allowMultipleBundles = "upgrade" == variant_type.toLowerCase(),
          offers_arr = document.querySelectorAll(bundles),
          i = 0;
        i < offers_arr.length;
        i++
      ) {
        var offer_id = offers_arr[i].getAttribute("id");
        console.log("addtl offers id", offer_id);
        var offer_el = document.getElementById("#" + offer_id);
      }
      var gu_additional_offers = (function () {
        function e() {
          if (
            "en" !== window.gu_language &&
            $(this).is(":visible") &&
            "auto" === $(this).css("clip")
          ) {
            var e = $(this).children(),
              t = parseInt($(this).css("font-size"));
            "" === $(this).attr("data-translation-textsizer")
              ? (0 === e.length &&
                  ($(this).wrapInner("<span></span>"),
                  (e = $("span", $(this)))),
                t !== parseInt($(e).css("font-size")) &&
                  $(e).css("font-size", t + "px"),
                $(this).attr("data-translation-textsizer", t))
              : t > parseInt($(e).css("font-size")) &&
                ($(e).css("font-size", t + "px"),
                $(this).attr("data-translation-textsizer", t));
            var i = 0;
            "none" !== $(this).css("transform") &&
              (i =
                $(this).height() * (window.innerWidth >= 768 ? 2 : 2.25) + 2);
            var n = $(this).width() - i,
              a = parseInt($(this).attr("data-translation-textsizer"));
            $(e).css("font-size", a + "px");
            for (var o = $(e).width(), r = 1; o > n && r < 10; )
              (a = parseInt($(e).css("font-size"))),
                $(e).css("font-size", a - r + "px"),
                (o = $(e).width()),
                (n = $(this).width() - i),
                r++;
          }
        }
        function t(e) {
          multi_bundleData.filter(function (t, i) {
            return t.bundle_slug === e && (bundleNumber = i), bundleNumber;
          });
        }
        function i(e) {
          var t = $(bundles + ".selected").data("slug"),
            i = $(additional_offer).data("title"),
            n = $(additional_offer + " .bundle.selected").data("index"),
            a = $(bundles + ".selected").attr("data-bundle-qty"),
            o = multi_bundleData[n - 1].bundle_object;
          console.log(multi_bundleData);
          var r = n,
            l = o[0].bundle_variant_info.id;
          s.length > 0 &&
            ($.each(s, function (e, t) {
              gu_checkout.removeProduct(t);
            }),
            (s = []));
          var d = [];
          (d =
            "undefined" != typeof discount_bundle_object
              ? o.concat(discount_bundle_object)
              : o),
            $.each(d, function (e, n) {
              if (!(n.bundle_variant_info.variants.length > 1)) {
                var o =
                    "fixed" != a
                      ? $(
                          bundles + "." + selectedClass + " " + quantity_el
                        ).text()
                      : 1,
                  c = n.discount > 0;
                if (~a.indexOf("conditional")) {
                  var u = a.split("-")[1];
                  if (o > u) {
                    if (d.length > 1)
                      if (c) {
                        if (l != n.pid) return;
                        o -= u;
                      } else o = u;
                  } else if (c) return;
                }
                var p = {
                    product_id: n.bundle_variant_info.variants[0].product_id,
                    variant_id: n.bundle_variant_info.variants[0].id,
                    name: n.bundle_variant_info.title,
                    price: n.bundle_variant_info.variants[0].price,
                    qty: n.qty * o,
                    weight:
                      n.bundle_variant_info.weight +
                      n.bundle_variant_info.weight_unit,
                    img: n.bundle_variant_info.images[0]
                      ? n.bundle_variant_info.images[0].src
                      : "/wp-content/themes/giddyupio-prototype/images/image-placeholder.png",
                    sku: n.bundle_variant_info.variants[0].sku,
                    tags: gu_products.getPriceInfoForProduct(
                      n.bundle_variant_info.variants[0].product_id
                    ),
                    bundle_name: i,
                    bundle_id: t,
                    bundle_position: r,
                    type: "bundle",
                  },
                  f = 0,
                  g = "";
                gu_checkout.cart.forEach(function (e, t) {
                  p.product_id === e.product_id &&
                    ((f = e.qty + 1), (g = e.upi));
                });
                try {
                  if (0 == f) {
                    var _ = gu_checkout.addProduct(p);
                    s.push(_);
                  } else (p.qty = f), gu_checkout.updateProduct(g, p);
                } catch (h) {
                  console.error("Failure to add or update cart \r\n", h);
                }
              }
            }),
            e && gu_checkout.startCheckout(),
            gu_events.fireAndLogEvent(gu_events.eventList.bundleSelected);
        }
        function n(e) {
          var t = $(e.currentTarget),
            n = $(e.target).closest(".checkout").length,
            o = $(e.target).closest(".next").length,
            r = $(t).attr("data-index"),
            s = $(t).data("bundle-qty"),
            l = $(e.target).closest("[data-quantify]").length,
            d = ($(".qty", $(t)).text(), !(!n && !o && "fixed" != s));
          if (
            ($(e.target).closest(".no-checkout").length && (d = !1),
            multi_bundleData.forEach(function (e) {
              e.hasOwnProperty("selected_bundle") && delete e.selected_bundle;
            }),
            allowMultipleBundles)
          )
            if (n || l)
              $(bundles).each(function (e) {
                $(this).hasClass("selected")
                  ? (multi_bundleData[e].selected_bundle = !0)
                  : 0 != $(".qty", $(this)).text() &&
                    ($(this).addClass("selected"),
                    (multi_bundleData[e].selected_bundle = !0));
              });
            else {
              var c = $(t).closest("#offer").hasClass("with-variants-upgrade");
              c &&
                $(bundles).length > 2 &&
                (0 == $(".qty", $(t)).text() &&
                  ($(".qty", $(t)).text("1"), (d = !0)),
                $(bundles).each(function (e) {
                  0 != $(".qty", $(this)).text() &&
                    ($(this).addClass("selected"),
                    (multi_bundleData[e].selected_bundle = !0));
                }));
            }
          else multi_bundleData[r - 1].selected_bundle = !0;
          d ? (a($(t)), i(!0)) : mobileDevice && (a($(t)), i(!1)),
            gu_offer_events.updateTotalbarTotal();
        }
        function a(e) {
          if (allowMultipleBundles) {
            var t = $(".bundle-qty-selector", $(e));
            if (t.length) {
              var i = parseInt($(t).data("start-qty")),
                n = parseInt($(".qty", $(t)).text());
              n <= i
                ? (e.removeClass(selectedClass),
                  $(checkmark, $(e)).prop("checked", !1))
                : (e.addClass(selectedClass),
                  $(checkmark, $(e)).prop("checked", !0));
            }
          } else
            e.hasClass(selectedClass) ||
              ($(bundleClass, $(".additional-offer-container")).removeClass(
                selectedClass
              ),
              $(checkmark).prop("checked", !1),
              e.addClass(selectedClass),
              $(checkmark, $(e)).prop("checked", !0));
        }
        function o(e) {
          var t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : null,
            i = $(e).hasClass(bundleClass)
              ? e
              : $(e.currentTarget).closest(bundleClass),
            n = $(".bundle-qty-selector", $(i)),
            o = parseInt($(n).data("start-qty")),
            r = null != t ? t : $(e.currentTarget).data("quantify"),
            s = $(".qty", $(n)),
            l = Math.max(0 == o ? 0 : 1, parseInt($(s).text()) + parseInt(r));
          $(s).text(l).trigger("change"),
            0 == o &&
              (l > 0
                ? $(".checkout.visually-hidden", $(i)).trigger("click")
                : (a($(i)),
                  gu_vs.check() && allowMultipleBundles && gu_vs.update()));
        }
        function r() {
          !(function () {
            $(".hidden").hide(),
              $(bundles).each(function () {
                if (this.classList.contains("selected")) {
                  var e = this.getAttribute("data-index");
                  console.log(multi_bundleData),
                    (multi_bundleData[e - 1].selected_bundle = !0);
                }
              });
          })(),
            $(window)
              .on("load", function () {
                $("[data-translation-textsizer]").each(e);
              })
              .on("resize", function () {
                clearTimeout(window.resizedFinished),
                  (window.resizedFinished = setTimeout(function () {
                    $("[data-translation-textsizer]").each(e);
                  }, 100));
              }),
            $(document)
              .on(
                "click",
                ".cta.checkout.mobile, .cta.next.mobile",
                function (e) {
                  e.preventDefault();
                  var t = document.querySelector(".bundle.selected");
                  $(".cta-button", $(t)).click(), $(this).hide();
                }
              )
              .on("click", bundles, function (e) {
                e.preventDefault(), n(e);
              })
              .on("click", "[data-quantify]", function (e) {
                o(e), allowMultipleBundles && n(e);
              });
        }
        var s = ($("#checkout"), $("#chat-widget-container"), $("#footer"), []);
        return (
          (function () {
            var e = $("#google-translate");
            e.length &&
              setTimeout(function () {
                $(".goog-logo-link", e).removeAttr("href");
              }, 1e3);
          })(),
          { init: r, getActiveBundle: t }
        );
      })();
      gu_additional_offers.init();
    } else $("#offer").show();
  }
}
var gu_checkout_validation = (function () {
  function e() {
    var e = $('input:not([type="checkbox"]):not([type="promo"]), select');
    e.on("focus", function () {
      $(this)
        .parent()
        .find("label.form-field-label")
        .addClass("move")
        .removeClass("success"),
        $(this).parent().removeClass("valid-field"),
        $(this).removeClass("error valid"),
        $(this).next("label.error").hide();
    }),
      e.on("blur", function (e) {
        var t = $(this).parent().find("label.form-field-label"),
          i = $(this).closest("form").validate();
        t.removeClass("move"),
          $(this).hasClass("valid") &&
            (t.addClass("success"), $(this).parent().addClass("valid-field")),
          0 !== $(this).val().length && i.element($(this));
      });
  }
  function t() {
    $("#form-field-billing_method_radio-1").on("click", function () {
      (gu_checkout_validation.hasBillingAddress = !0),
        $(".billing-address").slideDown({ duration: 400 });
    }),
      $("#form-field-billing_method_radio-0").on("click", function () {
        (gu_checkout_validation.hasBillingAddress = !1),
          $(".billing-address").slideUp({ duration: 400 });
      });
  }
  function i() {
    $("#form-field-paypalShippingInfo-1").on("click", function () {
      $(".alt-paypal-shipping-address").slideDown({ duration: 400 });
      var e = $("#form-field-paypal_shipping_info_country")
        .children("option")
        .filter(":selected")
        .val();
      D(e, "paypal_shipping_info"), z();
    }),
      $("#form-field-paypalShippingInfo-0").on("click", function () {
        m(K.country_code, $("#form-field-paypal_info_phone"), !1),
          $(".alt-paypal-shipping-address").slideUp({ duration: 400 });
      });
  }
  function n(e) {
    var t = void 0,
      i = void 0,
      n = void 0;
    if ("paypal" === e) {
      if (
        document.getElementById("form-field-paypalShippingInfo-1").checked ===
        !0
      ) {
        var a = document.getElementById(
            "form-field-paypal_shipping_info_country"
          ),
          o = document
            .getElementById("form-field-paypal_shipping_info_state")
            .value.toLowerCase()
            .trim(),
          r = a.options[a.selectedIndex];
        r.text;
        if (
          ((n = r.value),
          (t = {
            email: K.email,
            first_name: document.getElementById(
              "form-field-paypal_shipping_info_fname"
            ).value,
            last_name: document.getElementById(
              "form-field-paypal_shipping_info_lname"
            ).value,
            address1: document.getElementById(
              "form-field-paypal_shipping_info_address"
            ).value,
            address2:
              document.getElementById(
                "form-field-paypal_shipping_info_address2"
              ).value || "",
            city: document.getElementById(
              "form-field-paypal_shipping_info_city"
            ).value,
            province_code: ie,
            province: ne,
            country_code: n.toUpperCase(),
            zip: document.getElementById("form-field-paypal_shipping_info_zip")
              .value,
          }),
          (i = Z[n].provinces),
          Z[n].provinces.length)
        )
          for (var s in i)
            if (i.hasOwnProperty(s)) {
              var l = void 0,
                d = void 0,
                c = void 0;
              try {
                (c = o
                  .normalize("NFD")
                  .replace(/[\u0300-\u036f]/g, "")
                  .toLowerCase()),
                  (l = i[s].name
                    .normalize("NFD")
                    .replace(/[\u0300-\u036f]/g, "")
                    .toLowerCase()),
                  (d = i[s].code
                    .normalize("NFD")
                    .replace(/[\u0300-\u036f]/g, "")
                    .toLowerCase());
              } catch (u) {
                String.prototype.normalize ||
                  ((c = gu_common.removeDiacritics(o).toLowerCase()),
                  (l = gu_common.removeDiacritics(i[s].name).toLowerCase()),
                  (d = gu_common.removeDiacritics(i[s].code).toLowerCase()));
              }
              (l !== c && d !== c) ||
                ((t.province_code = i[s].code), (t.province = i[s].name));
            }
      } else t = K;
      t.email = K.email;
      var p = document.getElementById("form-field-paypal_info_phone").value;
      return "" !== p && (t.phone = p), t;
    }
    var f = document.getElementById("form-field-shipping_info_country"),
      g = document
        .getElementById("form-field-shipping_info_state")
        .value.toLowerCase(),
      _ = f.options[f.selectedIndex];
    if (
      ((n = _.value),
      (t = {
        email: document.getElementById("form-field-shipping_info_email").value,
        first_name: document.getElementById("form-field-shipping_info_fname")
          .value,
        last_name: document.getElementById("form-field-shipping_info_lname")
          .value,
        address1: document.getElementById("form-field-shipping_info_address")
          .value,
        address2:
          document.getElementById("form-field-shipping_info_address2").value ||
          "",
        city: document.getElementById("form-field-shipping_info_city").value,
        province_code: ie,
        province: ne,
        country_code: n.toUpperCase(),
        zip: document.getElementById("form-field-shipping_info_zip").value,
      }),
      (i = Z[n].provinces),
      Z[n].provinces.length)
    )
      for (var h in i)
        if (i.hasOwnProperty(h)) {
          var v = void 0,
            m = void 0,
            y = void 0;
          try {
            (y = g
              .normalize("NFD")
              .replace(/[\u0300-\u036f]/g, "")
              .toLowerCase()),
              (v = i[h].name
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "")
                .toLowerCase()),
              (m = i[h].code
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "")
                .toLowerCase());
          } catch (u) {
            String.prototype.normalize ||
              ((y = gu_common.removeDiacritics(g).toLowerCase()),
              (v = gu_common.removeDiacritics(i[h].name).toLowerCase()),
              (m = gu_common.removeDiacritics(i[h].code).toLowerCase()));
          }
          (v !== y && m !== y) ||
            ((t.province_code = i[h].code), (t.province = i[h].name));
        }
    if ("IL" === t.country_code) {
      var b = t.zip;
      if (5 === b.length) {
        var k = (b + "00").slice(-7);
        t.zip = k;
      }
    }
    var $ = document.getElementById("form-field-shipping_info_phone").value;
    return "" !== $ && (t.phone = $), t;
  }
  function a() {
    var e = document.getElementById("form-field-billing_info_country"),
      t = document
        .getElementById("form-field-billing_info_state")
        .value.toLowerCase(),
      i = e.options[e.selectedIndex],
      n = i.value,
      a = void 0,
      o = Z[n].provinces;
    if (X)
      a = {
        email: K.email,
        first_name: ee.first_name,
        last_name: ee.last_name,
        address1: ee.address1,
        city: ee.city,
        province_code: ee.province_code,
        zip: ee.zip,
        country_code: ee.country_code,
      };
    else if (
      ((a = {
        first_name: document.getElementById("form-field-billing_info_fname")
          .value,
        last_name: document.getElementById("form-field-billing_info_lname")
          .value,
        address1: document.getElementById("form-field-billing_info_address")
          .value,
        address2: document.getElementById("form-field-billing_info_address2")
          .value,
        city: document.getElementById("form-field-billing_info_city").value,
        country_code: n.toUpperCase(),
        zip: document.getElementById("form-field-billing_info_zip").value,
      }),
      Z[n].provinces.length)
    )
      for (var r in o)
        o.hasOwnProperty(r) &&
          ((o[r].code.toLowerCase() !== t && o[r].name.toLowerCase() !== t) ||
            ((a.province_code = o[r].code), (a.province = o[r].name)));
    return a;
  }
  function o() {
    var e = document.getElementById("form-field-payment_info_exp").value,
      t = $.payment.cardExpiryVal(e),
      i = document.getElementById("form-field-payment_info_cc").value;
    return {
      first_name: document.getElementById("form-field-shipping_info_fname")
        .value,
      last_name: document.getElementById("form-field-shipping_info_lname")
        .value,
      number: i.replace(/\s/g, ""),
      month: t.month.toString(),
      year: t.year.toString(),
      verification_value: document.getElementById("form-field-payment_info_cvc")
        .value,
    };
  }
  function r() {
    var e = $("#form-field-payment_info_cc"),
      t = $("#form-field-payment_info_exp"),
      i = $("#form-field-payment_info_cvc"),
      n = ["amex", "visa", "mastercard", "discover"];
    e.payment("formatCardNumber"),
      t.payment("formatCardExpiry"),
      i.payment("formatCardCVC"),
      e.on("keyup", function () {
        var t = $.payment.cardType(e.val());
        if (null !== t) {
          var i = $(".cc-" + t),
            a = n.filter(function (e) {
              return e !== t;
            });
          i.addClass("active").removeClass("inactive");
          var o = !0,
            r = !1,
            s = void 0;
          try {
            for (
              var l, d = a[Symbol.iterator]();
              !(o = (l = d.next()).done);
              o = !0
            ) {
              var c = l.value;
              $(".cc-" + c)
                .addClass("inactive")
                .removeClass("active");
            }
          } catch (u) {
            (r = !0), (s = u);
          } finally {
            try {
              !o && d["return"] && d["return"]();
            } finally {
              if (r) throw s;
            }
          }
        }
      });
  }
  function s() {
    $("#form-field-payment_info_cc").on("blur", function (e) {
      var t = $(this).parent();
      $.payment.validateCardNumber(e.target.value)
        ? ($(this).removeClass("error").addClass("success"),
          $(t).addClass("valid-field"),
          $("label", $(t)).addClass("success"))
        : ($(this).removeClass("success").addClass("error"),
          $(t).removeClass("valid-field"),
          $("label", $(t)).removeClass("success"));
    });
  }
  function l() {
    if (
      "stripe" === gu_payments.paymentProcessorSetting &&
      gu_payments.stripeGeoAvailability()
    )
      return (
        gu_payments.stripeValidation
          ? $("#card-element").removeClass("error")
          : $("#card-element").addClass("error"),
        gu_payments.stripeValidation
      );
    var e = document.getElementById("form-field-payment_info_cc").value,
      t = document.getElementById("form-field-payment_info_exp").value,
      i = document.getElementById("form-field-payment_info_cvc").value,
      n = $.payment.cardType(e),
      a = $.payment.cardExpiryVal(t);
    return !!(
      $.payment.validateCardNumber(e) &&
      $.payment.validateCardExpiry(a.month.toString(), a.year.toString()) &&
      $.payment.validateCardCVC(i, n)
    );
  }
  function d(e) {
    (H = n(e)), "credit" === e && gu_payments.createOrder(e, H), u();
  }
  function c() {
    $("#checkout").on("click", 'input[name="shipping-method"]', function () {
      gu_payments.selectShippingRate(this.dataset.handle);
    });
  }
  function u() {
    var e = $("#shipping_method");
    e.empty();
    var t =
      '<div class="option" id="fetchingShipping"><input type="radio" style="display: none" /><label class="fetch-ship" for="fetchingShipping">' +
      guSubstituteString("Fetching shipping options...") +
      '</label><span class="loading-icon"><img alt="loading" width="20" height="20" src="' +
      checkoutScript.theme_directory +
      '/images/checkout-loading-compressed.gif" loading="lazy"/></span></div>';
    e.append(t), F("disable");
  }
  function p(e) {
    $("#fetchingShipping").hide(), (te = e);
    var t = $("#shipping_method");
    t.empty(),
      e.forEach(function (e, i) {
        var n = "form-field-shipping_method_radio-" + i,
          a =
            '<div class="option"><input type="radio" name="shipping-method" id="' +
            n +
            '" data-handle="' +
            e.handle +
            '"/><label class="display-ship" for="' +
            n +
            '">' +
            e.title +
            '</label><span class="shipping-rate">' +
            gu_common.guDisplayCurrency(e.price) +
            "</span></div>";
        t.append(a);
      }),
      (document.getElementById("form-field-shipping_method_radio-0").checked =
        !0),
      F("enable");
  }
  function f() {
    var e =
        '<div id="refreshShipping">' +
        oe +
        '<a class="refresh-btn">' +
        re +
        "</a></div>",
      t = $("#shipping_method"),
      i = $("#refreshShipping");
    i.is(":visible") || (t.empty(), t.append(e), F("disable"), R());
  }
  function g(e) {
    var t = document.getElementById("form-field-" + e + "_info_country"),
      i = t.options[t.selectedIndex];
    t.options.length > 1 &&
      (t.removeChild(i),
      t.insertBefore(i, t.firstChild),
      $(
        '<option disabled value="_________________">_________________</option>'
      ).insertAfter(i)),
      D(i.value, "shipping_info");
  }
  function _(e) {
    var t = $("#form-field-billing_info_country");
    e.forEach(function (e) {
      var i =
        "<option value='" +
        e[0].toLowerCase() +
        "' " +
        (gu_country === e[0].toLowerCase() ? "selected" : "") +
        "> " +
        e[1] +
        "</option>";
      W.append(i), J.append(i), t.append(i);
    }),
      g("shipping"),
      g("billing"),
      g("paypal_shipping");
  }
  function h(e) {
    var t = "";
    if (
      ((t += void 0 !== e.address1 ? e.address1 : ""),
      (t += void 0 !== e.city ? ", " + e.city : ""),
      (t += void 0 !== e.province_code ? ", " + e.province_code : ""),
      (t += void 0 !== e.zip ? ", " + e.zip : ""),
      void 0 !== e.country_code && "us" !== e.country_code.toLowerCase())
    ) {
      var i = gu_countries.getCountryByAbbreviation(),
        n = i[e.country_code.toLowerCase()];
      t += void 0 !== n ? ", " + n : ", " + e.country_code;
    }
    $('label[for="form-field-paypalShippingInfo-0"]').text(t),
      m(e.country_code, $("#form-field-paypal_info_phone"));
    var a = j().find(function (t, i) {
      if (t[0].toLowerCase() === e.country_code.toLowerCase()) return !0;
    });
    void 0 === a
      ? (console.error(
          "Paypal Shipping: country " + e.country_code + " is not allowed"
        ),
        v(!0))
      : v(!1),
      d("paypal");
  }
  function v(e) {
    if (e) {
      $("#form-field-paypalShippingInfo-1").trigger("click"),
        $("#form-field-paypalShippingInfo-0").addClass("silently-disabled"),
        $('label[for="form-field-paypalShippingInfo-0"]').addClass(
          "invalid silently-disabled"
        );
      var t = guSubstituteString(
        "Sorry, we don't ship to that country. Please provide a different shipping address"
      );
      $("#checkout-error.modal .message").html("<p>" + t + "</p>"),
        $("#checkout-error.modal").modal();
    } else
      $("#form-field-paypalShippingInfo-0").removeClass("silently-disabled"),
        $('label[for="form-field-paypalShippingInfo-0"]').removeClass(
          "invalid silently-disabled"
        ),
        $("#alt-shipping_info").is(":visible") &&
          $("#form-field-paypalShippingInfo-0").trigger("click");
  }
  function m(e, t) {
    var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
    if ("us" !== e.toLowerCase() || t.data("validate-required") === !0) {
      if (
        (t.attr("placeholder", de),
        t.prev().text(guSubstituteString("Required")),
        t.next("label").show(),
        t.removeClass("valid"),
        i)
      ) {
        var n = $("#shipping_info").validate();
        n.showErrors({ "form_fields[shipping_info_phone]": "Required" });
      }
    } else
      t.attr("placeholder", ce),
        t.prev().text(ce),
        t.next("label").hide(),
        t.removeClass("error");
  }
  function y() {
    W.on("change", function () {
      var e = $("#form-field-shipping_info_phone"),
        t = W.children("option").filter(":selected").val();
      0 === Object.keys(Z).length && (Z = gu_countries.getCountries()),
        D(t, "shipping_info"),
        m(t, e),
        q(t);
    });
  }
  function b() {
    J.on("change", function () {
      var e = $("#form-field-paypal_shipping_info_country")
        .children("option")
        .filter(":selected")
        .val();
      $("#form-field-paypal_info_phone");
      D(e, "paypal_shipping_info");
    });
  }
  function k() {
    0 === Object.keys(Z).length && (Z = gu_countries.getCountries());
    var e = W.val(),
      t = $("#form-field-shipping_info_state").val().toLowerCase().trim(),
      i = Z[e].provinces;
    if (Z[e].provinces.length)
      for (var n in i)
        if (i.hasOwnProperty(n)) {
          var a = void 0,
            o = void 0,
            r = void 0;
          try {
            (r = t
              .normalize("NFD")
              .replace(/[\u0300-\u036f]/g, "")
              .toLowerCase()),
              (a = i[n].name
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "")
                .toLowerCase()),
              (o = i[n].code
                .normalize("NFD")
                .replace(/[\u0300-\u036f]/g, "")
                .toLowerCase());
          } catch (s) {
            String.prototype.normalize ||
              ((r = gu_common.removeDiacritics(t).toLowerCase()),
              (a = gu_common.removeDiacritics(i[n].name).toLowerCase()),
              (o = gu_common.removeDiacritics(i[n].code).toLowerCase()));
          }
          if (a === r || o === r)
            return (
              (ie = i[n].code),
              (ne = i[n].name),
              void $("#form-field-shipping_info_state")
                .addClass("valid")
                .removeClass("error")
            );
          $("#form-field-shipping_info_state")
            .addClass("error")
            .removeClass("valid");
        }
  }
  function w() {
    $(
      "#form-field-shipping_info_state, #form-field-paypal_shipping_info_state, #form-field-shipping_info_country, #form-field-paypal_shipping_info_country"
    ).on("blur", function (e) {
      return k();
    });
  }
  function x() {
    var e = $("#form-field-shipping_info_country"),
      t = $("#form-field-shipping_info_zip"),
      i = void 0;
    $("#form-field-shipping_info_zip, #form-field-paypal_shipping_info_zip").on(
      "blur",
      function () {
        "ca" === e.val() &&
          ((7 === t.val().length && " " === t.val()[3]) ||
            (7 === t.val().length && "-" === t.val()[3]
              ? ((i = t.val().replace("-", " ")), t.val(i))
              : 6 === t.val().length &&
                ((i = t.val().slice(0, 3) + " " + t.val().slice(3)),
                t.val(i))));
      }
    );
  }
  function C(e) {
    (X = !0),
      e && ((K = e.shipping_address), (ee = e.billing_address)),
      E(!1),
      h(K);
  }
  function S(e) {
    E(!0),
      e &&
        ($("#form-field-shipping_info_email").val(e.email).blur().blur(),
        $("#form-field-shipping_info_fname").val(e.first_name).blur().blur(),
        $("#form-field-shipping_info_lname").val(e.last_name).blur().blur(),
        $("#form-field-shipping_info_phone").val(e.phone).blur().blur(),
        $("#form-field-shipping_info_address").val(e.address1).blur().blur(),
        $("#form-field-shipping_info_address2")
          .val(e.address2 || "")
          .blur()
          .blur(),
        $("#form-field-shipping_info_city").val(e.city).blur().blur(),
        $("#form-field-shipping_info_zip").val(e.zip).blur().blur(),
        $("#form-field-shipping_info_country")
          .val(e.country_code.toLowerCase())
          .blur()
          .blur(),
        $("#form-field-shipping_info_state")
          .val(e.province_code)
          .blur()
          .blur()),
      M();
  }
  function E(e) {
    e = e || !1;
    var t = $(".gu-checkout-form-reveal");
    t.wrapAll("<div class='gu-checkout-form' style=\"width: 100%\" />"),
      $("#shipInfoNext").hide(),
      e
        ? ($(
            ".payment-info, .payment-method, .billing-address-form, .billing-address-header"
          ).removeClass("gu-hidden"),
          gu_events.fireAndLogEvent(gu_events.eventList.shippingInfo))
        : ($(
            ".shipping-info, .billing-address-header, .billing-address, .paypal-hide, .or-pay-with, .payment-info"
          ).addClass("gu-hidden"),
          $(
            ".shipping-address-form, .paypal-shipping-address, .phone-number-header, .phone-number-field"
          ).removeClass("gu-hidden"),
          (document.getElementById("form-field-paypalShippingInfo-0").checked =
            !0),
          y()),
      $(
        ".complete-order, .shipping-method-form, .shipping-method-header"
      ).removeClass("gu-hidden"),
      (document.getElementById("form-field-billing_method_radio-0").checked =
        !0),
      $(".gu-checkout-form").slideDown({ duration: 400 }),
      $("#form-field-shipping_info_country").blur();
  }
  function q(e) {
    var t =
      arguments.length > 1 && void 0 !== arguments[1]
        ? arguments[1]
        : "shipping_info";
    0 === Object.keys(Z).length && (Z = gu_countries.getCountries());
    var i = $("#form-field-" + t + "_city"),
      n = $("#form-field-" + t + "_state"),
      a = $("#form-field-" + t + "_zip"),
      o = guSubstituteString(Z[e].cityLabel),
      r = guSubstituteString(Z[e].provinceLabel),
      s = guSubstituteString(Z[e].postalLabel);
    i.attr("placeholder", o).prev("label").text(o),
      n.attr("placeholder", r).prev("label").text(r),
      a.attr("placeholder", s).prev("label").text(s);
  }
  function D(e, t) {
    var i = Z[e].formBuilder,
      n = $("#" + t + " .wrapper")
        .parent()
        .filter(function () {
          return this.className.match(/\bcol/);
        });
    if (
      (n.each(function () {
        $(this).show(), $(this).removeClass("visually-hidden");
      }),
      Z[e].provinceDefault
        ? $("#form-field-" + t + "_state").val(Z[e].provinceDefault)
        : $("#form-field-" + t + "_state").val(""),
      !i)
    ) {
      i = Y
        ? "e-100_f-50_l-50_a1-50_a2-50_ci-100_s-50_z-50_co-100_p-100"
        : "e-100_f-50_l-50_a1-50_a2-50_ci-100_co-33_s-33_z-33_p-100";
      var a = void 0;
      Z[e].postal.length > 0 && (a = !0);
      var o = void 0;
      Z[e].provinces.length > 0 && (o = !0),
        a && !o
          ? (console.log("has only zip"),
            (i = Y
              ? "e-100_f-50_l-50_a1-50_a2-50_ci-50_s-0_z-50_co-100_p-100"
              : "e-100_f-50_l-50_a1-50_a2-50_ci-100_co-70_s-0_z-30_p-100"))
          : !a && o
          ? (console.log("has only prov"),
            (i = Y
              ? "e-100_f-50_l-50_a1-50_a2-50_ci-50_s-50_z-0_co-100_p-100"
              : "e-100_f-50_l-50_a1-50_a2-50_ci-100_co-50_s-50_z-0_p-100"))
          : a ||
            o ||
            (console.log("has neither"),
            (i = Y
              ? "e-100_f-50_l-50_a1-50_a2-50_ci-100_s-0_z-0_co-100_p-100"
              : "e-100_f-50_l-50_a1-50_a2-50_ci-100_co-100_s-0_z-0_p-100"));
    }
    for (var r = i.split("_"), s = [], l = [], d = 0; d < r.length; d++)
      s.push(r[d].split("-")[0]), l.push(r[d].split("-")[1]);
    var c = void 0;
    c =
      "paypal_shipping_info" === t
        ? $("#alt-shipping_info .row")
        : $("#" + t + " .row");
    for (var u = 0, p = 0; p < s.length; p++) {
      var f = "",
        g = void 0;
      switch (s[p]) {
        case "e":
          (f = "email"),
            (g = $("#form-field-" + t + "_email")
              .closest(".wrapper")
              .parent());
          break;
        case "f":
          (f = "fname"),
            (g = $("#form-field-" + t + "_fname")
              .closest(".wrapper")
              .parent());
          break;
        case "l":
          (f = "lname"),
            (g = $("#form-field-" + t + "_lname")
              .closest(".wrapper")
              .parent());
          break;
        case "a1":
          (f = "address1"),
            (g = $("#form-field-" + t + "_address")
              .closest(".wrapper")
              .parent());
          break;
        case "a2":
          (f = "address2"),
            (g = $("#form-field-" + t + "_address2")
              .closest(".wrapper")
              .parent());
          break;
        case "ci":
          (f = "city"),
            (g = $("#form-field-" + t + "_city")
              .closest(".wrapper")
              .parent());
          break;
        case "co":
          (f = "country"),
            (g = $("#form-field-" + t + "_country")
              .closest(".wrapper")
              .parent());
          break;
        case "s":
          (f = "state"),
            (g = $("#form-field-" + t + "_state")
              .closest(".wrapper")
              .parent());
          break;
        case "z":
          (f = "zip"),
            (g = $("#form-field-" + t + "_zip")
              .closest(".wrapper")
              .parent());
          break;
        case "p":
          (f = "phone"),
            (g = $("#form-field-" + t + "_phone")
              .closest(".wrapper")
              .parent());
          break;
        default:
          console.log("Error: unrecognized field code");
      }
      var _ = l[p];
      if ("0" === _) g.hide();
      else if ("1" === _) $(g).addClass("visually-hidden");
      else {
        switch ((g.show(), _)) {
          case "100":
            (_ = "col-12 py-1 px-0"), (u += 12);
            break;
          case "70":
            (_ = "col-8 py-1 " + I(u, 8)), (u += 8);
            break;
          case "50":
            (_ = "col-6 py-1 " + I(u, 6)), (u += 6);
            break;
          case "33":
            (_ = "col-4 py-1 " + I(u, 4)), (u += 4);
            break;
          case "30":
            (_ = "col-4 py-1 " + I(u, 4)), (u += 4);
        }
        u >= 12 && (u = 0), g.removeClass(), g.addClass(_);
      }
      c.append(g);
    }
    "paypal_shipping_info" === t
      ? m(e, $("#form-field-paypal_info_phone"), !1)
      : m(e, $("#form-field-" + t + "_phone"), !1);
  }
  function I(e, t) {
    var i = "";
    return (
      0 === e ? (i += "pl-0") : e > 0 && (i += "pl-1"),
      (i += e + t < 12 ? " pr-1" : " pr-0")
    );
  }
  function O() {
    $("body").on("click", "#completeOrder", function (e) {
      e.preventDefault(), P();
    });
  }
  function P() {
    var e = $("#payment_info"),
      t = $("#shipping_address"),
      i = $("#billing_info"),
      r = document.querySelector('input[name="shipping-method"]:checked');
    if (!r) return void setTimeout(P, 300);
    var s = document.querySelector('input[name="shipping-method"]:checked')
        .dataset.handle,
      d = document.getElementById("form-field-shipping_info_phone"),
      c = {
        shipping_method: s,
        shipping_address: X ? n("paypal") : n(),
        payment_info: X ? "PayPal" : o(),
        billing_address: a(),
      };
    return (
      !!t.valid() &&
      !!i.valid() &&
      !!e.valid() &&
      ($("#form-field-shipping_info_phone").valid() || "us" === W.val()
        ? void (l()
            ? ((G = o()), gu_payments.completeOrder(c))
            : X && gu_payments.completeOrder(c))
        : (d.scrollIntoView(), !1))
    );
  }
  function F(e) {
    "disable" === e
      ? $("#completeOrder").css({ opacity: ".5", pointerEvents: "none" })
      : "enable" === e &&
        $("#completeOrder").css({ opacity: "1", pointerEvents: "all" });
  }
  function L() {
    var e =
        '<a class="phone-tip" data-title=""><img src="' +
        checkoutScript.theme_directory +
        '/images/checkout-question.svg" alt="?" loading="lazy"></a>',
      t =
        '<a class="cvc-tip" data-title=""><img src="' +
        checkoutScript.theme_directory +
        '/images/checkout-question.svg" alt="?" loading="lazy"></a>',
      i = $("#form-field-shipping_info_phone"),
      n = $("#form-field-paypal_info_phone"),
      a = $("#form-field-payment_info_cvc");
    i.after(e), n.after(e), a.after(t);
    var o = $(".phone-tip"),
      r = $(".cvc-tip");
    o.attr("data-title", se),
      r.attr("data-title", le),
      o.on("click", function () {
        o.hasClass("active") ? o.removeClass("active") : o.addClass("active");
      }),
      r.on("click", function () {
        r.hasClass("active") ? r.removeClass("active") : r.addClass("active");
      }),
      $(document).on("mouseup touchstart", function (e) {
        !o.is(e.target) &&
          0 === o.has(e.target).length &&
          o.hasClass("active") &&
          o.removeClass("active"),
          !r.is(e.target) &&
            0 === r.has(e.target).length &&
            r.hasClass("active") &&
            r.removeClass("active");
      });
  }
  function T() {
    $("#shipInfoNext").on("click", function (e) {
      e.preventDefault();
      var t = $(".shipping-method-header"),
        i = $("#shipping_info"),
        n = $(".paypal-shipping-address");
      if (i.is(":visible")) {
        if (!i.valid()) return (t = $(".shipping-info")), !1;
        E(!0);
      } else if (n.is(":visible")) {
        if (!$("#shipping_address").valid())
          return (t = $("#shipping_address")), !1;
        E();
      }
      d("credit"),
        r(),
        z(),
        setTimeout(function () {
          var e = t.height();
          $("html, body").animate({ scrollTop: t.offset().top - e }, 1e3);
        }, 150);
    });
  }
  function M() {
    var e = n(X ? "paypal" : site_vars.cc_processor),
      t = a();
    u(),
      ae ? gu_payments.refreshShipping(e, t) : gu_payments.refreshShipping(e);
  }
  function R() {
    $(document).on("click", ".refresh-btn", function (e) {
      return (
        e.preventDefault(),
        e.stopImmediatePropagation(),
        !!$("#shipping_info").valid() && void M()
      );
    });
  }
  function z() {
    var e = $(".paypal-shipping-address");
    $("#shipping_info").valid() &&
      !e.is(":visible") &&
      $(
        "#form-field-shipping_info_city, #form-field-shipping_info_country, #form-field-shipping_info_state, #form-field-shipping_info_zip"
      ).on("change", function () {
        f();
      }),
      e.is(":visible") &&
        $(
          "#form-field-paypal_shipping_info_city, #form-field-paypal_shipping_info_country, #form-field-paypal_shipping_info_state, #form-field-paypal_shipping_info_zip"
        ).on("change", function () {
          f();
        });
  }
  function A(e) {
    var t = $("#paypal-button-container");
    "show" === e
      ? t.parent().css({ opacity: "1", pointerEvents: "all" })
      : t.parent().css({ opacity: ".5", pointerEvents: "none" });
  }
  function B() {
    var e = '<div class="payment-error-container"></div>',
      t =
        "We're sorry but your credit card was declined. Please recheck all information or use an alternative credit card and try submitting again.";
    t = guSubstituteString(t);
    var i = $(".payment-info.payment-info-header");
    0 === $(".payment-error-container").length &&
      (i.after(e), $(".payment-error-container").text(t).slideDown()),
      $("html, body").animate(
        { scrollTop: $("#checkout .payment-info-header").offset().top },
        500
      );
  }
  function N(e, t) {
    var i = $("#shipping_info"),
      n = $("#shipping_address"),
      a = $("#billing_info"),
      o = !1,
      r = !1,
      s = "shipping_info_",
      l = void 0,
      d = "Zip code does not match state";
    i.valid() &&
      ($("#form-field-billing_method_radio-1").is(":checked")
        ? ((l = a.validate()), (o = !0), (s = "billing_info_"))
        : $("#form-field-paypalShippingInfo-1").is(":checked")
        ? ((l = n.validate()), (r = !0), (s = "paypal_shipping_info_"))
        : (l = i.validate()));
    var c = $("#form-field-" + s + e);
    c.parent(".wrapper").removeClass("valid-field"),
      c.prev("label").removeClass("success");
    var u = $("#form-field-" + s + "country")
        .children("option")
        .filter(":selected")
        .val(),
      p = void 0;
    "email" === e
      ? o
        ? l.showErrors({ "form_fields[billing_info_email]": "Incorrect email" })
        : l.showErrors({
            "form_fields[shipping_info_email]": "Incorrect email",
          })
      : "zip" === e &&
        ((p =
          "us" === u
            ? guSubstituteString("Incorrect Zip code")
            : guSubstituteString("Incorrect Postal code")),
        (d =
          "us" !== u
            ? "Postal code does not match the other parts of your address"
            : "Zip code does not match State"),
        o
          ? l.showErrors({ "form_fields[billing_info_zip]": p })
          : r
          ? l.showErrors({ "form_fields[paypal_shipping_info_zip]": p })
          : l.showErrors({ "form_fields[shipping_info_zip]": p }),
        gu_checkout.alert("confirm", guSubstituteString(d))),
      "billing" !== t && n.validate();
  }
  function j() {
    var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
      t = gu_countries.getCountryByAbbreviation(),
      i = gu_shippingZones.getZones(),
      n = window.site_vars.excluded_countries.toLowerCase().split(",");
    n = n.map(function (e) {
      return e.trim();
    });
    var a = void 0;
    e
      ? (a = gu_remote_data.shippingCountries)
      : ((a = window.site_vars.included_countries.toLowerCase().split(",")),
        (a = a.map(function (e) {
          return e.trim();
        })));
    for (var o in i)
      if (i.hasOwnProperty(o)) {
        if (~n.indexOf(o)) {
          n.splice(n.indexOf(o), 1);
          for (var r in i[o])
            i[o].hasOwnProperty(r) &&
              ((r = r.toLowerCase()), ~n.indexOf(r) || n.push(r));
        }
        if (~a.indexOf(o) && !e) {
          a.splice(a.indexOf(o), 1);
          for (var s in i[o])
            i[o].hasOwnProperty(s) &&
              ((s = s.toLowerCase()), ~a.indexOf(s) || a.push(s));
        }
      }
    ~a.indexOf("us") || e || a.push("us");
    var l = [];
    return (
      e
        ? a.forEach(function (e, t) {
            ~n.indexOf(e[0].toLowerCase()) || l.push(e);
          })
        : (a.forEach(function (e, i) {
            ~n.indexOf(e.toLowerCase())
              ? a.splice(i, 1)
              : l.push([e.toUpperCase(), t[e]]);
          }),
          l.sort(function (e, t) {
            return e[0] > t[0] ? 1 : -1;
          })),
      l
    );
  }
  function U() {
    (Z = gu_countries.getCountries()), (Q = j()), q(gu_country), _(Q);
  }
  function V() {
    e(), T(), c(), t(), i(), O(), w(), y(), b(), A("hide"), L(), x(), s();
    var n = window.innerWidth > 0 ? window.innerWidth : screen.width;
    n <= 480 && (Y = !0), guRemoteDataRegisterCallback(U, !0);
  }
  var H = {},
    G = {},
    W = $("#form-field-shipping_info_country"),
    J = $("#form-field-paypal_shipping_info_country"),
    Q = void 0,
    Z = {},
    X = !1,
    Y = !1,
    K = {},
    ee = {},
    te = void 0,
    ie = void 0,
    ne = void 0,
    ae = !1,
    oe = guSubstituteString("Refresh shipping"),
    re = guSubstituteString("Refresh"),
    se = guSubstituteString("In case we need to contact you about your order"),
    le = guSubstituteString(
      "3-digit security code usually found on the back of your card. American Express cards have a 4-digit code located on the front."
    ),
    de = guSubstituteString("Phone"),
    ce = guSubstituteString("Phone (optional)");
  return (
    $("#promo_wrap button").on("click", function () {
      gu_payments.submitPromoCode($("#form-field-promo").val());
    }),
    {
      init: V,
      displayShippingOptions: p,
      updatePayPalShippingInfo: C,
      togglePayPalButton: A,
      handlePaymentError: B,
      refreshShippingOptions: f,
      prepareForShippingRates: u,
      handleReturnCartOrder: S,
      fieldMismatch: N,
      validatePaymentDetails: l,
      getShippingCountries: j,
      hasBillingAddress: ae,
    }
  );
})();
document.addEventListener("DOMContentLoaded", function () {
  gu_checkout_validation.init(),
    $(window).keydown(function (e) {
      if (13 === e.keyCode) return e.preventDefault(), !1;
    });
  var e =
      (guSubstituteString("Please specify a valid phone number"),
      guSubstituteString("Please specify a valid credit card")),
    t = guSubstituteString("Email address must have an @"),
    i = guSubstituteString("Incorrect email address"),
    n = guSubstituteString("Required");
  if (
    (jQuery.validator.addMethod(
      "validCard",
      function (e) {
        return $.payment.validateCardNumber(e.value);
      },
      e
    ),
    jQuery.validator.addMethod(
      "emailHasSpecialCharacter",
      function (e) {
        return e.indexOf("@") !== -1;
      },
      t
    ),
    jQuery.validator.addMethod(
      "notEmpty",
      function (e) {
        return "" !== e.value;
      },
      ""
    ),
    jQuery.validator.addMethod(
      "isValidEmailAddress",
      function (e) {
        var t =
          /^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([ \t]*\r\n)?[ \t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([ \t]*\r\n)?[ \t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i;
        return t.test(e);
      },
      i
    ),
    jQuery.validator.addMethod(
      "requiredNotBlank",
      function (e, t) {
        return $.validator.methods.required.call(this, $.trim(e), t);
      },
      ""
    ),
    $("#shipping_info").validate({
      focusCleanup: !0,
      rules: {
        "form_fields[shipping_info_fname]": { required: !1 },
        "form_fields[shipping_info_lname]": { requiredNotBlank: !0 },
        "form_fields[shipping_info_email]": {
          requiredNotBlank: !0,
          emailHasSpecialCharacter: !0,
          isValidEmailAddress: !0,
          email: !1,
        },
        "form_fields[shipping_info_address]": { requiredNotBlank: !0 },
        "form_fields[shipping_info_address2]": { requiredNotBlank: !1 },
        "form_fields[shipping_info_city]": { requiredNotBlank: !0 },
        "form_fields[shipping_info_state]": { requiredNotBlank: !0 },
        "form_fields[shipping_info_zip]": { requiredNotBlank: !0 },
        "form_fields[shipping_info_phone]": {
          requiredNotBlank: {
            depends: function () {
              return (
                !!$(this).data("validate-required") ||
                "us" !==
                  $("#form-field-shipping_info_country")
                    .children("option")
                    .filter(":selected")
                    .val()
              );
            },
          },
        },
      },
      messages: {
        "form_fields[shipping_info_fname]": "",
        "form_fields[shipping_info_lname]": { requiredNotBlank: "" },
        "form_fields[shipping_info_email]": { required: "" },
        "form_fields[shipping_info_address]": { requiredNotBlank: "" },
        "form_fields[shipping_info_address2]": { requiredNotBlank: "" },
        "form_fields[shipping_info_city]": { requiredNotBlank: "" },
        "form_fields[shipping_info_state]": { requiredNotBlank: "" },
        "form_fields[shipping_info_zip]": { requiredNotBlank: "" },
        "form_fields[shipping_info_phone]": {
          required: n,
          requiredNotBlank: n,
        },
      },
      onkeyup: !1,
    }),
    $("#shipping_address").validate({
      focusCleanup: !0,
      rules: {
        "form_fields[paypal_shipping_info_lname]": { requiredNotBlank: !0 },
        "form_fields[paypal_shipping_info_address]": { requiredNotBlank: !0 },
        "form_fields[paypal_shipping_info_city]": { requiredNotBlank: !0 },
        "form_fields[paypal_shipping_info_state]": { requiredNotBlank: !0 },
        "form_fields[paypal_shipping_info_zip]": { requiredNotBlank: !0 },
        "form_fields[shipping_info_phone]": {
          requiredNotBlank: {
            depends: function () {
              return (
                !!$(this).data("validate-required") ||
                "us" !==
                  $("#form-field-paypal_shipping_info_country")
                    .children("option")
                    .filter(":selected")
                    .val()
              );
            },
          },
        },
      },
      messages: {
        "form_fields[paypal_shipping_info_lname]": "",
        "form_fields[paypal_shipping_info_address]": "",
        "form_fields[paypal_shipping_info_city]": "",
        "form_fields[paypal_shipping_info_state]": "",
        "form_fields[paypal_shipping_info_zip]": "",
        "form_fields[shipping_info_phone]": { required: n, notEmpty: n },
      },
      onkeyup: !1,
    }),
    $("#billing_info").validate({
      rules: {
        "form_fields[billing_info_fname]": { required: !1 },
        "form_fields[billing_info_lname]": { requiredNotBlank: !0 },
        "form_fields[billing_info_email]": { requiredNotBlank: !0, email: !0 },
        "form_fields[billing_info_address]": { requiredNotBlank: !0 },
        "form_fields[billing_info_city]": { requiredNotBlank: !0 },
        "form_fields[billing_info_zip]": { requiredNotBlank: !0 },
      },
      messages: {
        "form_fields[billing_info_fname]": "",
        "form_fields[billing_info_lname]": "",
        "form_fields[billing_info_email]": "",
        "form_fields[billing_info_address]": "",
        "form_fields[billing_info_city]": "",
      },
    }),
    $("#payment_info").validate({
      rules: {
        "form_fields[payment_info_cc]": { requiredNotBlank: !0 },
        "form_fields[payment_info_exp]": { requiredNotBlank: !0 },
        "form_fields[payment_info_cvc]": { requiredNotBlank: !0 },
      },
      messages: {
        "form_fields[payment_info_cc]": n,
        "form_fields[payment_info_exp]": n,
        "form_fields[payment_info_cvc]": n,
      },
    }),
    void 0 !== gu_qs.gucheckouttoken)
  ) {
    console.log("ab cart loaded", gu_qs.gucheckouttoken);
    var a = gu_qs.gucheckouttoken,
      o = "",
      r = $("#checkout");
    $("#checkout").css("display", "block"),
      $("#content-inner > div, #content-inner > section, #faq")
        .not("#checkout")
        .css("display", "none"),
      gu_payments.restoreOrder(a),
      r.stop(),
      r.not(":visible") &&
        $("<style>#checkout{display:block !important;}</style>").appendTo(
          "head"
        ),
      setTimeout(function () {
        (o = gu_payments.order.checkout.note_attributes.selected_user_bundle),
          console.log(o);
        var e = componentOffer.bundle_info;
        e.forEach(function (e) {
          e.hasOwnProperty("selected_bundle") && delete e.selected_bundle,
            e.bundle_slug === o && (e.selected_bundle = !0);
        }),
          gu_checkout_validation.refreshShippingOptions(),
          $("a.refresh-btn").click();
      }, 3e3);
  }
  $("body.custom_pages-template-template-offer-barebones").length > -1 &&
    ($("#variant-selector, #checkout > .row").wrap(
      "<div class='container'></div>"
    ),
    $('<div id="custom_pages_overlay"></div>').prependTo("#checkout"));
});
var gu_order_summary = (function () {
  function e() {
    var e = document.querySelector(".cart-trigger"),
      t = document.getElementById("mobile-order-summary");
    e &&
      e.addEventListener("click", function (i) {
        i.preventDefault();
        var n = document.querySelector(".hide-reveal-mobile"),
          a = $(".product-wrapper img");
        n.classList.contains("closed")
          ? (n.classList.remove("closed"),
            e.classList.remove("closed"),
            t.classList.add("open"),
            a.css({ visibility: "visible", display: "block" }))
          : (n.classList.add("closed"),
            e.classList.add("closed"),
            t.classList.remove("open"));
      });
  }
  return { toggleMobileDetails: e };
})();
gu_order_summary.toggleMobileDetails();
var _typeof =
    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
      ? function (e) {
          return typeof e;
        }
      : function (e) {
          return e &&
            "function" == typeof Symbol &&
            e.constructor === Symbol &&
            e !== Symbol.prototype
            ? "symbol"
            : typeof e;
        },
  errorRed = "#a62727",
  warningYellow = "#e2da50",
  successGreen = "#528045",
  alreadyUpdated = !1,
  note_attributes = {
    offer: gu_offer,
    landing_site: document.location.href,
    referring_site: document.referrer,
    gu_language: gu_language,
    gu_country: gu_country,
    gu_currency: gu_currency,
    gu_checkout_ver: gu_checkout_ver,
    gu_qs: gu_qs_to_str(gu_qs),
    gu_correlationId: window.gu_correlationId,
  },
  gu_payments = (function () {
    function e(e) {
      e.length > 0 && (B.gu_transaction_id ? d(e) : l(e));
    }
    function t(e, t) {
      if ("undefined" == typeof B || "undefined" == typeof B.checkout)
        return void console.log(
          "%c Can't create order because a cart hasn't been created yet. Please create a cart before trying to create an order with one.",
          'background: " + errorRed + "; color: white; display: block; padding: 5px;'
        );
      if (
        (I(),
        b(t),
        (e = "credit" === e && W === !0 ? "stripe" : "shopify"),
        _(e),
        "stripe" === H && D())
      ) {
        var i = new XMLHttpRequest();
        i.open(
          "POST",
          serverURL +
            "/v2/payments/" +
            gu_shopify_domain +
            "/transactions/create"
        ),
          i.setRequestHeader(
            "Content-Type",
            "application/x-www-form-urlencoded"
          ),
          (i.responseType = "json"),
          (i.onreadystatechange = function () {
            if (4 == i.readyState)
              if (i.status < 300 && i.status >= 200) {
                if (i.response) {
                  var e = T(i.response);
                  e.errors
                    ? (console.log(
                        "%c Order creation failed! Errors: " + e.message,
                        "background:  " +
                          errorRed +
                          "; color: white; display: block; padding: 5px;"
                      ),
                      gu_events.error(
                        "Failure in creating order. Status: " + e.message
                      ),
                      R(!0))
                    : (console.log(
                        "%c Order created!",
                        "background: " +
                          successGreen +
                          "; color: white; display: block; padding: 5px;"
                      ),
                      x(e),
                      f(function () {
                        gu_payments.getShippingRates();
                      }));
                }
              } else
                console.log(
                  "%c Failure in creating order :( Status: " + i.response,
                  "background:  " +
                    errorRed +
                    "; color: white; display: block; padding: 5px;"
                ),
                  gu_events.error(
                    "Failure in creating order. Status: " + i.response
                  ),
                  i.response.error.shipping_address
                    ? R(!0)
                    : i.response.error.email && R(!1);
          }),
          i.send(JSON.stringify(B));
      } else
        f(function () {
          gu_payments.getShippingRates();
        });
    }
    function i(e) {
      var t = new XMLHttpRequest();
      t.open(
        "GET",
        serverURL +
          "/v2/shopify/" +
          gu_shopify_domain +
          "/checkouts/" +
          B.checkout.token +
          "/shipping_rates?_=" +
          new Date().getTime(),
        !0
      ),
        (t.responseType = "json"),
        (t.onreadystatechange = function () {
          if (4 == t.readyState)
            if (t.status < 300 && t.status >= 200) {
              if (t.response) {
                var a = void 0;
                if (
                  ((a =
                    "object" == _typeof(t.response)
                      ? JSON.parse(JSON.stringify(t.response))
                      : JSON.parse(t.response)),
                  "undefined" != typeof a.error &&
                    (console.log(
                      "%c Failure in getting rates :( Status: " + a.errors,
                      "background: " +
                        errorRed +
                        "; color: white; display: block; padding: 5px;"
                    ),
                    gu_checkout_validation.refreshShippingOptions(),
                    R(Object.keys(a.error))),
                  0 == a.shipping_rates.length)
                )
                  if (
                    (console.log(
                      "%c Shipping rates came back empty  :( Trying again.",
                      "background: " +
                        warningYellow +
                        "; color: black; display: block; padding: 5px;"
                    ),
                    J > 5)
                  ) {
                    (J = 0),
                      console.log(
                        "%c Failure in getting rates :( Status: " + a,
                        "background: " +
                          errorRed +
                          "; color: white; display: block; padding: 5px;"
                      ),
                      gu_events.error(
                        "Shipping rates came back empty 5 times."
                      );
                    var o = $(selectedBundle).attr("id");
                    window._guLogger.error(
                      "CODE RED: Failed to load shipping rates after 5 attempts.",
                      null,
                      {
                        selectedBundle: o,
                        shopifyDomain: gu_shopify_domain,
                        severity: "critical",
                      }
                    ),
                      R(!0);
                  } else
                    J++,
                      gu_events.debug(
                        "Shipping rates came back empty. Trying again."
                      ),
                      setTimeout(function () {
                        i(e);
                      }, 1e3);
                else
                  (Q = a.shipping_rates),
                    console.log(
                      "%c Successfully got shipping rates!",
                      "background: " +
                        successGreen +
                        "; color: white; display: block; padding: 5px;"
                    ),
                    (J = 0),
                    (Q = $.grep(Q, function (e) {
                      return e.id.includes("Giddyup Rate Provider");
                    })),
                    $.each(Q, function () {
                      (this.title = this.title.substring(1)),
                        (this.title = guSubstituteString(this.title));
                    }),
                    e
                      ? n(Q[0].handle, function () {
                          s();
                        })
                      : n(Q[0].handle),
                    gu_checkout_validation.displayShippingOptions(Q),
                    gu_checkout_validation.togglePayPalButton("show");
              }
            } else
              "paypal" === B.paymentMethod &&
              void 0 === B.checkout.shipping_address
                ? console.error(
                    "Can't get shipping rates. Paypal order started but address not set"
                  )
                : (console.log(
                    "%c Failure in getting rates :( Status: " + t.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  gu_events.error("Fetching shipping rates has failed"),
                  R(!0));
        }),
        t.send(JSON.stringify({}));
    }
    function n(e, t) {
      (Z = $.grep(Q, function (t) {
        return t.id === e;
      })[0]),
        delete B.checkout.billing_address.company,
        delete B.checkout.shipping_address.company,
        (B.checkout.shipping_line = {
          handle: e,
          price: Z.price,
          title: Z.title,
        }),
        delete Z.displayTitle,
        (B.checkout.shipping_rate = Z),
        (B.checkout.total_price =
          B.checkout.shipping_rate.checkout.total_price),
        (B.checkout.payment_due =
          B.checkout.shipping_rate.checkout.total_price),
        delete B.checkout.billing_address.company,
        t ? f(t) : f();
    }
    function a(e, t) {
      (B.checkout.shipping_rate = null),
        (B.checkout.shipping_line = null),
        b(e),
        k(t ? t : e),
        f(function () {
          gu_payments.getShippingRates();
        });
    }
    function o() {
      var e = {};
      return (
        B.checkout.shipping_rate
          ? ((e.subtotal = Z.checkout.subtotal_price),
            (e.total = Z.checkout.total_price),
            (e.tax = Z.checkout.total_tax),
            (e.shipping = Z.price),
            (e.promo = B.checkout.applied_discount
              ? B.checkout.applied_discount.amount
              : null))
          : ((e.subtotal = B.checkout.total_line_items_price),
            (e.total = B.checkout.total_price),
            (e.tax = B.checkout.total_tax),
            (e.shipping = null),
            (e.promo = B.checkout.applied_discount
              ? B.checkout.applied_discount.amount
              : null)),
        e
      );
    }
    function r(e) {
      gu_checkout.alert("show"), console.log("did this run");
      var t = new XMLHttpRequest(),
        i = { gu_transaction_id: e };
      t.open(
        "POST",
        serverURL + "/v2/payments/" + gu_shopify_domain + "/transactions/" + e,
        !0
      ),
        (t.responseType = "json"),
        (t.onreadystatechange = function () {
          if (4 == t.readyState)
            if (t.status < 300 && t.status >= 200) {
              if (t.response) {
                gu_checkout.alert("hide"),
                  gu_checkout_validation.togglePayPalButton("show");
                var e = t.response,
                  i = new Date();
                if (
                  (e.checkout.checkout.shipping_rate &&
                    (e.checkout.checkout.shipping_rate = null),
                  e.checkout.checkout.created_at &&
                    (e.checkout.checkout.created_at = i.toISOString()),
                  e.checkout.checkout.updated_at &&
                    (e.checkout.checkout.updated_at = i.toISOString()),
                  _(e.paymentMethod),
                  x(e),
                  "created" !== t.response.transaction_status &&
                    "updated" !== t.response.transaction_status)
                )
                  (z = B.order.order_status_url), C(z);
                else {
                  var n = (new Date(), []);
                  n =
                    B.checkout.line_items && B.checkout.line_items.length > 0
                      ? B.checkout.line_items
                      : B.order.line_items;
                  for (var a = 0; a < n.length; a++) {
                    var o = {
                      product_id: n[a].product_id,
                      variant_id: n[a].id,
                      name: n[a].title,
                      price: n[a].price,
                      qty: n[a].quantity,
                      img: n[a].image_url,
                      sku: n[a].sku,
                    };
                    gu_checkout.addProduct(o);
                  }
                  var r = B.checkout.shipping_address;
                  (r.email = B.checkout.email),
                    ("credit" !== B.paymentMethod &&
                      "shopify" !== B.paymentMethod) ||
                      (gu_checkout_validation.handleReturnCartOrder(r),
                      window._guLogger.debug(
                        "testing restore order data on dev.",
                        { severity: "low", gudata_restore_order: r }
                      ));
                }
              }
            } else gu_checkout.alert("hide");
        }),
        t.send(JSON.stringify(i));
    }
    function s(e) {
      gu_checkout.alert("show", guSubstituteString("Processing"));
      var t = null,
        i = null,
        n = !1;
      e &&
        ((t = e.shipping_address),
        (i = e.billing_address),
        (N = e.payment_info)),
        i && gu_checkout_validation.hasBillingAddress && (k(i), (n = !0)),
        t && (b(t), (n = !0)),
        n
          ? (console.log("there was an update needed"),
            f(function () {
              console.log("update order and get shipping rates"),
                gu_payments.getShippingRates(!0);
            }))
          : "paypal" === B.paymentMethod || "adyen" === B.paymentMethod
          ? (console.log("lets authorize this order, did we get there?"), m())
          : "shopify" === B.paymentMethod
          ? h(N)
          : "stripe" === B.paymentMethod
          ? v()
          : y();
    }
    function l(e) {
      var t = createReport();
      (t && t.selectedUnits && t.gu_bundles) ||
        (gu_events.error("CODE RED: Failure creating report."),
        (t = {}),
        (t.selectedUnits = "ReportFailure"),
        (t.gu_bundles = "ReportFailure")),
        (note_attributes.selectedUnits = t.selectedUnits),
        (note_attributes.gu_bundles = t.gu_bundles),
        (note_attributes.selected_user_bundle = finduserselected);
      var i = new XMLHttpRequest(),
        a = {
          checkout: {
            landing_site_ref: document.location.href,
            line_items: e,
            note_attributes: note_attributes,
          },
        };
      i.open(
        "POST",
        serverURL + "/v2/shopify/" + gu_shopify_domain + "/checkouts",
        !0
      ),
        (i.responseType = "json"),
        (i.onreadystatechange = function () {
          if (4 == i.readyState)
            if (i.status < 300 && i.status >= 200) {
              if (i.response) {
                gu_checkout.alert("hide"),
                  console.log(
                    "%c Cart created! ",
                    "background: " +
                      successGreen +
                      "; color: white; display: block; padding:5px;"
                  ),
                  (X = 0),
                  gu_checkout_validation.togglePayPalButton("show"),
                  x(i.response);
                var t =
                  ("" !== location.search ? location.search + "&" : "?") +
                  "gucheckouttoken=" +
                  B.gu_transaction_id;
                if (
                  ((note_attributes.checkout_url =
                    "" + location.origin + location.pathname + t),
                  "1" === gu_checkout_paypal_pay &&
                    "1" != gu_checkout_native_paypal &&
                    $("#paypal-button")
                      .attr("onclick", "gu_payments.paypalRedirect(this.id);")
                      .data("page", B.checkout.web_url + "/express/redirect?"),
                  D() &&
                    ("stripe" === H ||
                      "stripealt" === H ||
                      (isMobile.any && "stripemobile" === H) ||
                      (!isMobile.any && "stripedesktop" === H)))
                ) {
                  var a = [];
                  console.log(" ");
                  for (var r = 0; r < B.checkout.line_items.length; r++) {
                    var s = {
                      amount: parseInt(
                        B.checkout.line_items[r].line_price.replace(".", "")
                      ),
                      label:
                        B.checkout.line_items[r].title +
                        (B.checkout.line_items[r].variant_title
                          ? " - " + B.checkout.line_items[r].variant_title
                          : "") +
                        (B.checkout.line_items[r].quantity > 1
                          ? " x" + B.checkout.line_items[r].quantity
                          : ""),
                    };
                    a.push(s);
                  }
                  a.push({
                    amount: parseInt(
                      B.checkout.subtotal_price.replace(".", "")
                    ),
                    label: "Subtotal",
                  }),
                    oe.update({
                      total: {
                        label: "Total",
                        amount: parseInt(
                          B.checkout.payment_due.replace(".", "")
                        ),
                        pending: !0,
                      },
                      displayItems: [
                        {
                          amount: parseInt(
                            B.checkout.subtotal_price.replace(".", "")
                          ),
                          label: "Subtotal",
                        },
                        { amount: 0, label: "Shipping", pending: !0 },
                        { amount: 0, label: "Estimated Tax", pending: !0 },
                      ],
                    }),
                    oe.on("shippingoptionchange", function (e) {
                      var t = [];
                      "googlepay" === re &&
                        (t = j.reduce(function (t, i) {
                          return i.id === e.shippingOption.id
                            ? [i].concat(_toConsumableArray(t))
                            : [].concat(_toConsumableArray(t), [i]);
                        }, [])),
                        n(e.shippingOption.id, function () {
                          var i = {
                            status: "success",
                            total: {
                              amount: B.payment.amount,
                              label: "Total",
                              pending: !1,
                            },
                            displayItems: [
                              {
                                amount: parseInt(
                                  B.checkout.subtotal_price.replace(".", "")
                                ),
                                label: "Subtotal",
                              },
                              {
                                amount: parseInt(
                                  B.checkout.shipping_rate.price.replace(
                                    ".",
                                    ""
                                  )
                                ),
                                label: "Shipping",
                              },
                              {
                                amount: parseInt(
                                  B.checkout.total_tax.replace(".", "")
                                ),
                                label: "Estimated Tax",
                              },
                            ],
                          };
                          0 !== t.length && (i.shippingOptions = t),
                            e.updateWith(i);
                        });
                    }),
                    oe.on("shippingaddresschange", function (e) {
                      gu_events.fireAndLogEvent(
                        gu_events.eventList.shippingInfo
                      );
                      var t = gu_checkout_validation
                        .getShippingCountries()
                        .find(function (t, i) {
                          if (
                            t[0].toLowerCase() ===
                            e.shippingAddress.country.toLowerCase()
                          )
                            return !0;
                        });
                      if (t) {
                        console.log("update order and fetch rates now");
                        var i = {
                          address1: "123 Main St",
                          last_name: "Lastname",
                          city: e.shippingAddress.city,
                          country_code: e.shippingAddress.country,
                          phone: e.shippingAddress.phone,
                          province_code: e.shippingAddress.region,
                          zip: e.shippingAddress.postalCode,
                        };
                        b(i),
                          _("stripe"),
                          fetch(
                            serverURL +
                              "/v2/payments/" +
                              gu_shopify_domain +
                              "/transactions/create",
                            {
                              headers: {
                                "Content-Type":
                                  "application/x-www-form-urlencoded",
                              },
                              method: "post",
                              body: JSON.stringify(B),
                            }
                          )
                            .then(function (e) {
                              return e.json();
                            })
                            .then(function (t) {
                              gu_payments.syncOrder(t),
                                f(function () {
                                  P(e);
                                });
                            });
                      } else
                        e.updateWith({ status: "invalid_shipping_address" });
                    }),
                    oe.on("paymentmethod", function (e) {
                      (B.payment.paymentSubMethod = re),
                        gu_checkout.alert(
                          "show",
                          guSubstituteString("Processing")
                        ),
                        (Z = $.grep(Q, function (t) {
                          return t.id === e.shippingOption.id;
                        })[0]),
                        delete B.checkout.billing_address.company,
                        delete B.checkout.shipping_address.company,
                        (B.checkout.shipping_line = {
                          handle: e.shippingOption.id,
                          price: Z.price,
                          title: Z.title,
                        }),
                        (B.checkout.email = e.payerEmail),
                        delete Z.displayTitle,
                        (B.checkout.shipping_rate = Z),
                        (B.checkout.total_price =
                          B.checkout.shipping_rate.checkout.total_price),
                        (B.checkout.payment_due =
                          B.checkout.shipping_rate.checkout.total_price),
                        (B.checkout.shipping_address.address1 =
                          e.shippingAddress.addressLine[0].trim()),
                        e.shippingAddress.addressLine[1] &&
                          (B.checkout.shipping_address.address2 =
                            e.shippingAddress.addressLine[1].trim());
                      var t = e.payerName.split(" ")[0],
                        i = e.payerName.split(" ")[1];
                      i && i.length > 0
                        ? ((B.checkout.shipping_address.first_name = t),
                          (B.checkout.shipping_address.last_name = i),
                          (B.checkout.billing_address.first_name = t),
                          (B.checkout.billing_address.last_name = i))
                        : ((B.checkout.shipping_address.first_name =
                            e.payerName),
                          (B.checkout.shipping_address.last_name =
                            "Not Provided"),
                          (B.checkout.billing_address.first_name = e.payerName),
                          (B.checkout.billing_address.last_name =
                            "Not Provided")),
                        window.isCheckoutPhoneRequired
                          ? (B.checkout.shipping_address.phone =
                              e.payerPhone.replace("+", ""))
                          : (B.checkout.shipping_address.phone =
                              e.shippingAddress.phone.replace("+", "")),
                        delete B.checkout.shipping_address.company,
                        (B.checkout.billing_address.address1 =
                          e.paymentMethod.billing_details.address.line1.trim()),
                        e.paymentMethod.billing_details.address.line2 &&
                          (B.checkout.billing_address.address2 =
                            e.paymentMethod.billing_details.address.line2.trim()),
                        window.isCheckoutPhoneRequired
                          ? (B.checkout.billing_address.phone =
                              e.payerPhone.replace("+", ""))
                          : (B.checkout.billing_address.phone =
                              e.shippingAddress.phone.replace("+", "")),
                        delete B.checkout.billing_address.company;
                      var n = B.payment.paymentIntent
                        ? B.payment.paymentIntent.client_secret
                        : B.payment.client_secret;
                      ee.confirmCardPayment(
                        n,
                        { payment_method: e.paymentMethod.id },
                        { handleActions: !1 }
                      ).then(function (t) {
                        t.error
                          ? (e.complete("fail"), gu_checkout.alert("hide"))
                          : (e.complete("success"),
                            "requires_action" === t.paymentIntent.status
                              ? ee.confirmCardPayment(n).then(function (e) {
                                  e.error;
                                })
                              : (console.log("Payment success!"),
                                console.log(t),
                                (B.payment = t.paymentIntent),
                                (B.payment.pm_token =
                                  t.paymentIntent.payment_method),
                                (B.payment.paymentSubMethod = re),
                                y()));
                      });
                    });
                } else $("#payment-request-button").hide();
                A = o();
              }
            } else
              0 == i.status
                ? gu_checkout.alert(
                    "show",
                    guSubstituteString(
                      "Unable to connect to the Internet. Trying again..."
                    )
                  )
                : i.response.error.line_items
                ? console.log(
                    "%c Failure creating cart :( Status: " + i.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding:5px;"
                  )
                : gu_checkout.alert(
                    "show",
                    guSubstituteString(
                      "Our servers are temporarily unavailable. Trying again..."
                    )
                  ),
                console.log(
                  "%c Failure creating cart :( Status: " + i.status,
                  "background: " +
                    errorRed +
                    "; color: white; display: block; padding:5px;"
                ),
                gu_checkout.alert(
                  "show",
                  guSubstituteString("Your internet is disconnected.")
                ),
                gu_events.fire(gu_events.eventList.internetOrShopifyDown),
                X++,
                X > 5
                  ? gu_events.error("CODE RED: Failure creating cart 5+ times.")
                  : (gu_events.debug(
                      "Retrying connection with cart. Tried to create a cart " +
                        X +
                        " times."
                    ),
                    setTimeout(function () {
                      l(e);
                    }, 1e3));
        });
      Date.now();
      i.send(JSON.stringify(a));
    }
    function d(e) {
      if ("undefined" == typeof B || "undefined" == typeof B.gu_transaction_id)
        return void console.log(
          "%c Can't update cart because it hasn't been created yet. Please create a cart before trying to update it.",
          "background: " +
            warningYellow +
            "; color: black; display: block; padding: 5px;"
        );
      (B.checkout.line_items = e),
        console.log(
          "%c Cart updated! ",
          "background: " +
            successGreen +
            "; color: white; display: block; padding:5px;"
        ),
        gu_checkout_validation.togglePayPalButton();
      var t = createReport();
      (t && t.selectedUnits && t.gu_bundles) ||
        (gu_events.error("CODE RED: Failure creating report."),
        (t = {}),
        (t.selectedUnits = "ReportFailure"),
        (t.gu_bundles = "ReportFailure")),
        (B.checkout.note_attributes.selectedUnits = t.selectedUnits),
        (B.checkout.note_attributes.gu_bundles = t.gu_bundles),
        (B.checkout.note_attributes.selected_user_bundle = finduserselected),
        B.payment.id
          ? ((B.checkout.shipping_line = null),
            (B.checkout.shipping_rate = null),
            0 == V &&
              void 0 !== B.checkout.shipping_address &&
              (B.checkout.shipping_address.company = w(
                B.checkout.shipping_address
              )),
            gu_checkout_validation.prepareForShippingRates())
          : (delete B.checkout.shipping_address,
            delete B.checkout.billing_address);
      var i = B,
        n = new XMLHttpRequest();
      n.open(
        "PUT",
        serverURL +
          "/v2/shopify/" +
          gu_shopify_domain +
          "/checkouts/" +
          B.checkout.token
      ),
        (n.responseType = "json"),
        (n.onreadystatechange = function () {
          4 == n.readyState &&
            (n.status < 300 && n.status >= 200
              ? n.response
                ? (x(n.response),
                  console.log(
                    "%c Successfully updated the cart!",
                    "background: " +
                      successGreen +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  gu_events.fireAndLogEvent(
                    gu_events.eventList.cartUpdatedSuccessfully
                  ),
                  (Y = 0),
                  gu_checkout.alert("hide"),
                  B.payment.id
                    ? f(
                        G
                          ? function () {
                              P();
                            }
                          : function () {
                              gu_payments.getShippingRates();
                            }
                      )
                    : (gu_checkout_validation.togglePayPalButton("show"),
                      G &&
                        oe.update({
                          total: {
                            label: "Total",
                            amount: parseInt(
                              B.checkout.payment_due.replace(".", "")
                            ),
                            pending: !0,
                          },
                          displayItems: [
                            {
                              amount: parseInt(
                                B.checkout.subtotal_price.replace(".", "")
                              ),
                              label: "Subtotal",
                            },
                            { amount: 0, label: "Shipping", pending: !0 },
                            { amount: 0, label: "Estimated Tax", pending: !0 },
                          ],
                        })))
                : (console.log(
                    "%c Failure in updating cart :( Status: " + n.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  gu_events.fireAndLogEvent(
                    gu_events.eventList.errorUpdatingCart
                  ),
                  Y++,
                  Y > 5
                    ? (gu_events.error(
                        "CODE RED: Failure updating cart 5+ times."
                      ),
                      gu_checkout.alert(
                        "show",
                        "Our servers are temporarily unavailable. Trying again..."
                      ))
                    : (gu_events.debug(
                        "Retrying connection with update order. Tried to update " +
                          Y +
                          " times."
                      ),
                      setTimeout(function () {
                        d(e);
                      }, 1e3)))
              : (console.log(
                  "%c Failure in updating order :( Status: " + n.status,
                  "background: " +
                    errorRed +
                    "; color: white; display: block; padding: 5px;"
                ),
                gu_events.fireAndLogEvent(
                  gu_events.eventList.errorUpdatingCart
                ),
                Y++,
                Y > 5
                  ? (gu_events.error(
                      "CODE RED: Failure updating cart 5+ times."
                    ),
                    gu_checkout.alert(
                      "show",
                      "Our servers are temporarily unavailable. Trying again..."
                    ))
                  : (gu_events.debug(
                      "Retrying connection with update order. Tried to update " +
                        Y +
                        " times."
                    ),
                    setTimeout(function () {
                      d(e);
                    }, 1e3))));
        }),
        n.send(JSON.stringify(i));
    }
    function c(e) {
      var t = B;
      if (
        (delete B.checkout.applied_discount,
        (B.checkout.discount_code = e),
        "undefined" == typeof B)
      )
        return void console.log(
          "%c Can't update order with promo code because it hasn't been created yet. Please create an order before trying to update it.",
          "background: " +
            warningYellow +
            "; color: black; display: block; padding: 5px;"
        );
      var i = new XMLHttpRequest();
      i.open(
        "PUT",
        serverURL +
          "/v2/shopify/" +
          gu_shopify_domain +
          "/checkouts/" +
          B.checkout.token
      ),
        (i.responseType = "json"),
        (i.onreadystatechange = function () {
          4 == i.readyState &&
            (i.status < 300 && i.status >= 200
              ? i.response
                ? i.response.checkout.checkout &&
                  (null != i.response.checkout.checkout.applied_discount
                    ? (console.log(
                        "%c Successfully applied a discount!",
                        "background: " +
                          successGreen +
                          "; color: white; display: block; padding: 5px;"
                      ),
                      u("valid"),
                      gu_events.fireAndLogEvent(
                        gu_events.eventList.couponAddedSuccessfully
                      ),
                      $("#checkout .pricing .promo").show())
                    : (u(""),
                      gu_events.fireAndLogEvent(gu_events.eventList.badCoupon),
                      $("#checkout .pricing .promo").hide()),
                  x(i.response))
                : (console.log(
                    "%c Failure in updating order with promo code :( Status: " +
                      i.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  gu_events.fireAndLogEvent(
                    gu_events.eventList.errorUpdatingCart
                  ))
              : (u("invalid"),
                gu_events.fireAndLogEvent(gu_events.eventList.badCoupon)));
        }),
        i.send(JSON.stringify(t));
    }
    function u(e) {
      "valid" == e
        ? ($("#promo_wrap .promo").addClass("valid-field"),
          $("#promo_wrap #form-field-promo")
            .addClass("valid")
            .removeClass("error"),
          $("#promo_wrap #form-field-promo-error").hide(),
          $("#promo_wrap .form-field-label").addClass("success"))
        : "invalid" == e
        ? ($("#promo_wrap .promo").removeClass("valid-field"),
          $("#promo_wrap #form-field-promo")
            .removeClass("valid")
            .addClass("error"),
          $("#promo_wrap #form-field-promo-error").show(),
          $("#promo_wrap .form-field-label").removeClass("success"))
        : ($(this)
            .parent()
            .find("label.form-field-label")
            .removeClass("move")
            .removeClass("success"),
          $(this).parent().removeClass("valid-field"),
          $(this).removeClass("error valid"));
    }
    function p() {
      $("#form-field-promo").on("blur", function (e) {
        var t = $(this).parent().find("label.form-field-label");
        t.removeClass("move");
      }),
        $("#form-field-promo").on("focus", function () {
          $(this)
            .parent()
            .find("label.form-field-label")
            .addClass("move")
            .removeClass("success"),
            $(this).parent().removeClass("valid-field"),
            $(this).removeClass("error valid"),
            $(this).next("label.error").hide();
        });
    }
    function f(e) {
      var t = B;
      if ("undefined" == typeof B || "undefined" == typeof B.paymentMethod)
        return void console.log(
          "%c Can't update order because it hasn't been created yet. Please create an order before trying to update it. Maybe you meant to update the cart instead?",
          "background: " +
            warningYellow +
            "; color: black; display: block; padding: 5px;"
        );
      var i = new XMLHttpRequest();
      i.open(
        "PUT",
        serverURL +
          "/v2/payments/" +
          gu_shopify_domain +
          "/transactions/" +
          B.gu_transaction_id +
          "/update"
      ),
        (i.responseType = "json"),
        (i.onreadystatechange = function () {
          if (4 == i.readyState)
            if (i.status < 300 && i.status >= 200)
              i.response
                ? (x(i.response),
                  console.log(
                    "%c Successfully updated the order!",
                    "background: " +
                      successGreen +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  g(),
                  gu_events.fireAndLogEvent(
                    gu_events.eventList.cartUpdatedSuccessfully
                  ),
                  (K = 0),
                  e ? e() : gu_checkout_validation.togglePayPalButton("show"))
                : (console.log(
                    "%c Failure in updating order :( Status: " + i.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  gu_events.fireAndLogEvent(
                    gu_events.eventList.errorUpdatingCart
                  ),
                  K++,
                  K > 5
                    ? (gu_events.error(
                        "CODE RED: Failure updating cart 5+ times."
                      ),
                      R(Object.keys(i.response.error) || "shipping_address"),
                      gu_checkout_validation.refreshShippingOptions())
                    : (gu_events.debug(
                        "Retrying connection with update order. Tried to update " +
                          K +
                          " times."
                      ),
                      setTimeout(function () {
                        f(e);
                      }, 1e3)));
            else if (422 === i.status)
              if (i.response) {
                if (
                  (console.log(
                    "%c Failure in updating order :( Status: " + i.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  console.log("Error Response", i.response),
                  gu_events.fireAndLogEvent(
                    gu_events.eventList.errorUpdatingCart
                  ),
                  gu_events.error("Failure updating order"),
                  "IL" === B.checkout.shipping_address.country_code)
                )
                  if ("paypal" === B.paymentMethod) {
                    var t = B.checkout.shipping_address.zip;
                    if (5 === t.length) {
                      var n = (t + "00").slice(-7);
                      console.log("failed zip code", t),
                        console.log("new zip code", n),
                        (gu_payments.order.checkout.shipping_address.zip = n),
                        (gu_payments.order.checkout.shipping_address.email =
                          gu_payments.order.checkout.email),
                        gu_checkout_validation.refreshShippingOptions(),
                        $("a.refresh-btn").trigger("click");
                    }
                  } else if (!alreadyUpdated) {
                    console.log("we are dealing with all kinds of fuckery");
                    var a = gu_payments.order.checkout.shipping_address.zip;
                    if (5 === a.length) {
                      var o = (a + "00").slice(-7);
                      console.log("failed zip code", a),
                        console.log("new zip code", o),
                        (gu_payments.order.checkout.shipping_address.zip = o),
                        gu_checkout_validation.refreshShippingOptions(),
                        $("a.refresh-btn").trigger("click"),
                        (alreadyUpdated = !0),
                        console.log("did it update", alreadyUpdated);
                    }
                  }
                "undefined" != typeof i.response.error
                  ? "expired" === i.response.error.shipping_rate.id[0].code
                    ? K > 5
                      ? (gu_events.error(
                          "CODE RED: Failure updating cart 5+ times."
                        ),
                        R(Object.keys(i.response.error)),
                        gu_checkout_validation.refreshShippingOptions())
                      : (console.log(
                          "Expired rates - attempt to refresh rates and complete order."
                        ),
                        gu_checkout.alert(
                          "show",
                          guSubstituteString("Processing")
                        ),
                        gu_checkout_validation.refreshShippingOptions(),
                        $("a.refresh-btn").trigger("click"),
                        setTimeout(function () {
                          $("#completeOrder").trigger("click");
                        }, 4e3))
                    : (R(Object.keys(i.response.error)),
                      gu_checkout_validation.refreshShippingOptions())
                  : (K++,
                    K > 5
                      ? (gu_events.error(
                          "CODE RED: Failure updating cart 5+ times."
                        ),
                        R(Object.keys(i.response.error)),
                        gu_checkout_validation.refreshShippingOptions())
                      : (gu_events.debug(
                          "Retrying connection with update order. Tried to update " +
                            K +
                            " times."
                        ),
                        setTimeout(function () {
                          f(e);
                        }, 1e3)));
              } else console.log(i);
            else
              console.log(
                "%c Failure in updating order :( Status: " + i.status,
                "background: " +
                  errorRed +
                  "; color: white; display: block; padding: 5px;"
              ),
                gu_events.fireAndLogEvent(
                  gu_events.eventList.errorUpdatingCart
                ),
                K++,
                K > 5
                  ? (gu_events.error(
                      "CODE RED: Failure updating cart 5+ times."
                    ),
                    R(Object.keys(i.response.error)),
                    gu_checkout_validation.refreshShippingOptions())
                  : (gu_events.debug(
                      "Retrying connection with update order. Tried to update " +
                        K +
                        " times."
                    ),
                    setTimeout(function () {
                      f(e);
                    }, 1e3)),
                gu_events.error("Failed updating order " + K + " times.");
        }),
        i.send(JSON.stringify(t));
    }
    function g() {
      if (!B.checkout.shipping_address.email && "stripe" !== B.paymentMethod) {
        var e = B.checkout.email;
        setTimeout(function () {
          B.checkout.shipping_address.email = e;
        }, 1e3);
      }
      void 0 === B.checkout.email &&
        "stripe" !== B.paymentMethod &&
        setTimeout(function () {
          gu_checkout_validation.refreshShippingOptions(),
            $("a.refresh-btn").click();
        }, 300);
    }
    function _(e) {
      "stripe" === e && (B.payment_method_types = ["card"]),
        (B.paymentMethod = e);
    }
    function h(e) {
      var t = new XMLHttpRequest(),
        i = {
          payment: {
            amount: B.checkout.payment_due,
            unique_token: B.checkout.token,
            credit_card: e,
          },
        };
      t.open("POST", "https://elb.deposit.shopifycs.com/sessions", !0),
        (t.responseType = "json"),
        t.setRequestHeader("Content-Type", "application/json"),
        (t.onreadystatechange = function () {
          4 == t.readyState &&
            (t.status < 300 && t.status >= 200
              ? t.response &&
                (console.log(
                  "%c Credit card processed!",
                  "background: " +
                    successGreen +
                    "; color: white; display: block; padding: 5px;"
                ),
                (B.payment.session_id = T(t.response).id),
                m())
              : (console.log(
                  "%c Credit card failure! :( Status: " + t.status,
                  "background: " +
                    errorRed +
                    "; color: white; display: block; padding: 5px;"
                ),
                gu_checkout.alert("hide"),
                gu_events.debug("Customer's card failed Shopify Card Vaulting"),
                gu_checkout_validation.handlePaymentError()));
        }),
        t.send(JSON.stringify(i));
    }
    function v() {
      var e = B.payment.paymentIntent
        ? B.payment.paymentIntent.client_secret
        : B.payment.client_secret;
      ee.confirmCardPayment(e, {
        payment_method: {
          card: ne,
          billing_details: {
            address: {
              city: B.checkout.billing_address.city,
              country: B.checkout.billing_address.country_code,
              line1: B.checkout.billing_address.address1,
              line2: B.checkout.billing_address.address2,
              postal_code: B.checkout.billing_address.zip,
              state: B.checkout.billing_address.province_code,
            },
            email: B.checkout.email,
            name:
              B.checkout.billing_address.first_name +
              " " +
              B.checkout.billing_address.last_name,
            phone: B.checkout.billing_address.phone,
          },
        },
      }).then(function (e) {
        var t = e.paymentIntent ? e.paymentIntent : e;
        t.error
          ? (console.log(
              "%c Credit card failure! :( Error: " + t.error,
              "background: " +
                errorRed +
                "; color: white; display: block; padding: 5px;"
            ),
            gu_checkout.alert("hide"),
            gu_events.debug("Customer's card failed Stripe Card Processing"),
            gu_checkout_validation.handlePaymentError())
          : "succeeded" === t.status &&
            (console.log(
              "%c Card processed with Stripe! ",
              "background: " +
                successGreen +
                "; color: white; display: block; padding:5px;"
            ),
            (B.payment = t),
            (B.payment.pm_token = t.payment_method),
            y());
      });
    }
    function m() {
      "adyen" === B.paymentMethod &&
        ((U.originalReference = B.gu_transaction_id),
        (U.originalMerchantReference = B.gu_transaction_id),
        (U.amount.value = B.checkout.payment_due),
        (U.paymentMethod.encryptedCardNumber =
          gu_payments.adyenCard.state.data.encryptedCardNumber),
        (U.paymentMethod.encryptedExpiryMonth =
          gu_payments.adyenCard.state.data.encryptedExpiryMonth),
        (U.paymentMethod.encryptedExpiryYear =
          gu_payments.adyenCard.state.data.encryptedExpiryYear),
        (U.paymentMethod.encryptedSecurityCode =
          gu_payments.adyenCard.state.data.encryptedSecurityCode),
        (U.paymentMethod.holderName =
          B.checkout.billing_address.first_name +
          " " +
          B.checkout.billing_address.last_name),
        (B.checkout.adyen = U));
      var e = B,
        t = new XMLHttpRequest();
      t.open(
        "POST",
        serverURL +
          "/v2/payments/" +
          gu_shopify_domain +
          "/transactions/" +
          B.gu_transaction_id +
          "/authorize"
      ),
        t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
        (t.responseType = "json"),
        (t.onreadystatechange = function () {
          if (4 == t.readyState)
            if (t.status < 300 && t.status >= 200) {
              if (t.response) {
                var e = T(t.response);
                if (e.errors)
                  console.log(
                    "%c Failure in order authorization :( Status: " + e.message,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                    gu_checkout.alert("hide"),
                    gu_checkout_validation.handlePaymentError(error),
                    gu_events.fireAndLogEvent(gu_events.eventList.ccFailed),
                    gu_events.debug("Customer's card failed Authorize");
                else {
                  var e = T(t.response);
                  console.log(
                    "%c Order authorized! ",
                    "background: " +
                      successGreen +
                      "; color: white; display: block; padding:5px;"
                  ),
                    "paypal" === B.paymentMethod
                      ? (B.payment.authorization = {
                          id: e.payment.purchase_units[0].payments
                            .authorizations[0].id,
                        })
                      : "adyen" === B.paymentMethod &&
                        ((B.payment = e.payment),
                        (B.checkout.adyen.originalReference =
                          B.payment.originalReference),
                        (B.checkout.adyen.pspReference =
                          B.payment.pspReference)),
                    y();
                }
              }
            } else
              gu_events.fireAndLogEvent(gu_events.eventList.ccFailed),
                gu_checkout.alert("hide"),
                gu_events.debug("Customer's card failed Authorize"),
                gu_checkout_validation.handlePaymentError();
        }),
        t.send(JSON.stringify(e));
    }
    function y() {
      "adyen" === B.paymentMethod &&
        ((B.checkout.adyen.originalReference = B.payment.id),
        (B.checkout.adyen.pspReference = B.payment.id)),
        "stripe" === B.paymentMethod &&
          "undefined" == typeof B.payment.paymentSubMethod &&
          (B.payment.paymentSubMethod = "card"),
        delete B.checkout.shipping_address.company,
        delete B.checkout.billing_address.company,
        (B.checkout.billing_address.company = ""),
        (B.checkout.shipping_address.company = "");
      var e = createReport();
      (e && e.selectedUnits && e.gu_bundles) ||
        (gu_events.error("CODE RED: Failure creating report."),
        (e = {}),
        (e.selectedUnits = "ReportFailure"),
        (e.gu_bundles = "ReportFailure")),
        (note_attributes.selectedUnits = e.selectedUnits),
        (note_attributes.gu_bundles = e.gu_bundles),
        (B.checkout.note_attributes = note_attributes),
        gu_events.fireAndLogEvent(gu_events.eventList.submitOrder);
      var t = B,
        i = new XMLHttpRequest();
      i.open(
        "POST",
        serverURL +
          "/v2/payments/" +
          gu_shopify_domain +
          "/transactions/" +
          B.gu_transaction_id +
          "/complete"
      ),
        (i.responseType = "json"),
        (i.onreadystatechange = function () {
          4 == i.readyState &&
            (201 === i.status
              ? setTimeout(function () {
                  console.log(
                    "%c Order isn't ready yet, let's try again",
                    "background: " +
                      warningYellow +
                      "; color: black; display: block; padding:5px;"
                  ),
                    gu_events.debug(
                      "Process order attempted, but order isn't ready yet. Trying again."
                    ),
                    y();
                }, 1e3)
              : i.status < 300 && i.status >= 200 && 201 !== i.status
              ? i.response
                ? (console.log(
                    "%c Order processed! ",
                    "background: " +
                      successGreen +
                      "; color: white; display: block; padding:5px;"
                  ),
                  x(i.response),
                  (z = B.order.order_status_url),
                  C(z))
                : (console.log(i),
                  gu_events.error(
                    "Major order process error. Valid status with no response."
                  ))
              : 406 === i.status
              ? i.response
                ? (console.log(
                    "%c Failure in processing order :( Status: " + i.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  gu_events.fireAndLogEvent(gu_events.eventList.ccFailed),
                  gu_checkout.alert("hide"),
                  gu_events.debug("Customer's card failed Process Order"),
                  gu_checkout_validation.handlePaymentError())
                : console.log(i)
              : 504 === i.status
              ? i.response
                ? (console.log(
                    "%c Failure in processing order :( Status: " + i.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  gu_events.fireAndLogEvent(
                    gu_events.eventList.errorProcessingOrder
                  ),
                  gu_events.error("Failure processing order"),
                  r(B.gu_transaction_id))
                : console.log(i)
              : 422 === i.status
              ? i.response
                ? (console.log(
                    "%c Failure in processing order :( Status: " + i.status,
                    "background: " +
                      errorRed +
                      "; color: white; display: block; padding: 5px;"
                  ),
                  gu_events.fireAndLogEvent(
                    gu_events.eventList.errorProcessingOrder
                  ),
                  gu_events.error("Failure processing order"),
                  "undefined" != typeof i.response.error
                    ? (R(Object.keys(i.response.error)),
                      gu_checkout_validation.refreshShippingOptions())
                    : "paypal" === B.paymentMethod ||
                      (gu_checkout.alert("hide"),
                      gu_checkout_validation.handlePaymentError(
                        B.paymentMethod
                      )))
                : console.log(i)
              : (console.log(
                  "%c Failure in processing order :( Status: " + i.status,
                  "background: " +
                    errorRed +
                    "; color: white; display: block; padding: 5px;"
                ),
                gu_events.fireAndLogEvent(
                  gu_events.eventList.errorProcessingOrder
                ),
                gu_events.error("Failure processing order"),
                "paypal" === B.paymentMethod ||
                  (gu_checkout.alert("hide"),
                  gu_checkout_validation.handlePaymentError(B.paymentMethod))));
        }),
        i.send(JSON.stringify(t));
    }
    function b(e) {
      var t = e.email;
      (B.checkout.shipping_address = e),
        (B.checkout.shipping_address.email = t),
        B.checkout.billing_address || (B.checkout.billing_address = e),
        (B.checkout.email = t),
        0 == V && (B.checkout.shipping_address.company = w(e));
    }
    function k(e) {
      B.checkout.billing_address = e;
    }
    function w(e) {
      for (
        var t = "", i = void 0, n = 0;
        n < componentOffer.bundle_info.length;
        n++
      )
        if (componentOffer.bundle_info[n].selected_bundle) {
          i = gu_vs.check()
            ? gu_vs.checkRates(componentOffer.bundle_info[n].bundle_shipping)
            : componentOffer.bundle_info[n].bundle_shipping;
          break;
        }
      if ("us" === e.country_code.toLowerCase()) {
        for (
          var a = void 0, o = 0;
          o < i.domestic_shipping.domestic_rate_exceptions.length;
          o++
        )
          for (
            var r =
                i.domestic_shipping.domestic_rate_exceptions[
                  o
                ].override_zones.split(","),
              s = 0;
            s < r.length;
            s++
          )
            e.province_code.toLowerCase() === r[s] &&
              (a =
                i.domestic_shipping.domestic_rate_exceptions[o]
                  .shipping_charge);
        var l = "";
        if (
          ((l = M(a ? a : i.domestic_shipping.default_domestic_shipping_rate)),
          (t +=
            i.domestic_shipping.custom_default_rate_name_toggle.length &&
            i.domestic_shipping.custom_default_rate_name
              ? "-" + i.domestic_shipping.custom_default_rate_name + ":" + l
              : "000" === l
              ? "-Free Shipping:" + l
              : "-Standard Shipping:" + l),
          "" != i.domestic_shipping.expedited_domestic_shipping)
        ) {
          console.log("there is an expedited rate");
          for (
            var d = void 0, c = 0;
            c < i.domestic_shipping.dom_exp_rate_overrides.length;
            c++
          )
            for (
              var u =
                  i.domestic_shipping.dom_exp_rate_overrides[
                    c
                  ].override_zones.split(","),
                p = 0;
              p < u.length;
              p++
            )
              e.province_code.toLowerCase() === u[p] &&
                (d =
                  i.domestic_shipping.dom_exp_rate_overrides[c]
                    .shipping_charge);
          (l = M(d ? d : i.domestic_shipping.default_expedited_rate)),
            (t +=
              i.domestic_shipping.custom_expedited_rate_name_toggle.length &&
              i.domestic_shipping.custom_expedited_rate_name
                ? ";-" +
                  i.domestic_shipping.custom_expedited_rate_name +
                  ":" +
                  l
                : "000" === l
                ? ";-Free Shipping:" + l
                : ";-Expedited Shipping:" + l);
        }
      } else {
        for (
          var f = gu_shippingZones.getZones(), g = void 0, _ = 0;
          _ < i.international_shipping.intl_rate_exceptions.length;
          _++
        )
          for (
            var h =
                i.international_shipping.intl_rate_exceptions[
                  _
                ].override_zones.split(","),
              v = 0;
            v < h.length;
            v++
          )
            h[v] in f
              ? Object.keys(f[h[v]]).includes(e.country_code) &&
                (g =
                  i.international_shipping.intl_rate_exceptions[_]
                    .shipping_charge)
              : e.country_code.toLowerCase() === h[v] &&
                (g =
                  i.international_shipping.intl_rate_exceptions[_]
                    .shipping_charge);
        var m = "";
        if (
          ((m = M(g ? g : i.international_shipping.default_intl_shipping_rate)),
          (t +=
            i.international_shipping.custom_default_intl_rate_name_toggle
              .length && i.international_shipping.custom_default_intl_rate_name
              ? ";-" +
                i.international_shipping.custom_default_intl_rate_name +
                ":" +
                m
              : "000" === m
              ? "-Free Shipping:" + m
              : "-Standard Shipping:" + m),
          "" != i.international_shipping.expedited_intl_shipping)
        ) {
          console.log("there is an expedited rate");
          for (
            var y = void 0, b = 0;
            b < i.international_shipping.intl_exp_rate_overrides.length;
            b++
          )
            for (
              var k =
                  i.international_shipping.intl_exp_rate_overrides[
                    b
                  ].override_zones.split(","),
                $ = 0;
              $ < k.length;
              $++
            )
              k[$] in f
                ? e.country_code.toLowerCase() ===
                    Object.keys(f[k[$]])[0].toLowerCase() &&
                  (y =
                    i.international_shipping.intl_exp_rate_overrides[b]
                      .shipping_charge)
                : e.country_code.toLowerCase() === k[$] &&
                  (y =
                    i.international_shipping.intl_exp_rate_overrides[b]
                      .shipping_charge);
          t += y
            ? ";-Expedited Shipping:" + M(y)
            : ";-Expedited Shipping:" +
              M(i.international_shipping.default_international_expedited_rate);
        }
      }
      return t;
    }
    function x(e, t) {
      if (
        ((e = T(e)),
        e.checkout &&
          ("undefined" != typeof checkout &&
            "undefined" != typeof checkout.order_id &&
            (e.checkout.order_id = checkout.order_id),
          (B.checkout = e.checkout.checkout),
          B.checkout.applied_discount
            ? (B.checkout.applied_discount = B.checkout.applied_discount)
            : (B.checkout.applied_discount = ""),
          (B.gu_transaction_id = e.gu_transaction_id),
          (B.shopify_domain = e.shopify_domain),
          (B.shopifydomain_checkout_token =
            e.shopify_domain + "_" + e.checkout.checkout.token),
          (B.paymentStatus = e.status),
          B.checkout.phone || delete B.checkout.phone,
          B.checkout.credit_card || delete B.checkout.credit_card,
          B.checkout.shipping_address || delete B.checkout.shipping_address,
          B.checkout.billing_address || delete B.checkout.billing_address,
          delete B.checkout.tax_lines,
          gu_qs.gucheckouttoken ||
            (B.checkout.note_attributes = note_attributes),
          gu_checkout.updatePrices(o())),
        e.payment)
      ) {
        if (
          ("undefined" != typeof e.payment.id && (B.payment.id = e.payment.id),
          "stripe" === e.paymentMethod && (B.payment = e.payment),
          (B.payment.payment_token = e.payment_token),
          (B.payment.checkout_token = e.checkout.checkout.token),
          e.payment.payer && "created" == e.transaction_status)
        ) {
          B.checkout.email = e.payment.payer.email_address;
          var i = {
            first_name: e.payment.payer.name.given_name,
            last_name: e.payment.payer.name.surname,
            address1:
              e.payment.purchase_units[0].shipping.address.address_line_1,
            address2:
              e.payment.purchase_units[0].shipping.address.address_line_2,
            city: e.payment.purchase_units[0].shipping.address.admin_area_2,
            province_code:
              e.payment.purchase_units[0].shipping.address.admin_area_1,
            zip: e.payment.purchase_units[0].shipping.address.postal_code,
            country_code:
              e.payment.purchase_units[0].shipping.address.country_code,
          };
          (B.checkout.shipping_address = i), (B.checkout.billing_address = i);
        }
        if (t) {
          var n = B.checkout;
          (n.email = B.checkout.email),
            (n.phone = B.checkout.phone),
            B.checkout.shipping_line && delete B.checkout.shipping_line,
            B.checkout.shipping_rate && delete B.checkout.shipping_rate,
            0 == V &&
              (B.checkout.shipping_address.company = w(
                B.checkout.shipping_address
              )),
            gu_checkout_validation.updatePayPalShippingInfo(n);
        }
      }
      e.order && (B.order = e.order);
    }
    function C(e) {
      gu_events.fireAndLogEvent(gu_events.eventList.orderConversion),
        setTimeout(function () {
          var t = e.split("?")[1];
          "undefined" != typeof t &&
            "key" == t.split("=")[0] &&
            ((e = e.split("?")[0] + "/"), (gu_qs.key = t.split("=")[1])),
            (e = E(e)),
            (window.location = e + gu_qs_to_str(gu_qs));
        }, 1e3);
    }
    function S(e) {
      gu_events.fireAndLogEvent(gu_events.eventList.paypalClicked),
        gu_events.fireAndLogEvent(gu_events.eventList.shippingInfo);
      var t = $("#" + e).data("page");
      "?" == t.charAt(t.length - 1) && (t = t.slice(0, -1)),
        (t = E(t)),
        setTimeout(function () {
          window.location = t + gu_qs_to_str(gu_qs);
        }, 500);
    }
    function E(e) {
      var t = document.createElement("a");
      return (
        (t.href = e), (t.hostname = "shop." + site_vars.shopifyname + ".io"), t
      );
    }
    function q() {
      (W = !0),
        $("#payment_info").hide(),
        ne.mount("#card-element"),
        ne.on("change", function (e) {
          var t = document.getElementById("card-errors");
          e.error
            ? ($("#card-element").addClass("error"),
              (t.textContent = e.error.message),
              t.classList.add("visible"))
            : ($("#card-element").removeClass("error"),
              t.classList.remove("visible")),
            (gu_payments.stripeValidation = !(
              e.empty ||
              e.error ||
              !e.complete
            ));
        });
    }
    function D() {
      if (
        "11039" === gu_qs.gupcon ||
        "29423" === gu_qs.gupcon ||
        "30693" === gu_qs.gupcon ||
        "49429" === gu_qs.gupcon
      )
        console.log("Stripe enabled via qstring.");
      else if (site_vars.stripe_enable_worldwide)
        console.log("Stripe enabled for all countries.");
      else {
        var e = site_vars.stripe_selected_countries
            .toLowerCase()
            .replace(/[\s\uFEFF\xA0]/g, "")
            .split(",")
            .filter(function (e) {
              return !e.match(/z[1234567890]+/g) && !!e;
            }),
          t = gu_shippingZones.getZones(),
          i = site_vars.stripe_selected_countries
            .toLowerCase()
            .replace(/[\s\uFEFF\xA0]/g, "")
            .split(",")
            .filter(function (e) {
              return e.match(/z[1234567890]+/g) && !!e;
            });
        if (
          (console.log(
            "the selected zones",
            site_vars.stripe_selected_countries
          ),
          i.forEach(function (i) {
            e = [].concat(
              _toConsumableArray(
                new Set(
                  e.concat(
                    Object.keys(t[i]).map(function (e) {
                      return e.toLowerCase();
                    })
                  )
                )
              )
            );
          }),
          !~e.indexOf(gu_country.toLowerCase()))
        )
          return (
            console.log("Stripe not enabled for " + window.gu_country + "."),
            (document.getElementById("payment-request-button").style.display =
              "none"),
            !1
          );
        console.log(
          "Stripe enabled for " +
            window.gu_country +
            (e.length > 1 ? " and " + e.length + " total countries" : " only") +
            "."
        );
      }
      return !0;
    }
    function I() {
      if (
        "11039" === gu_qs.gupcon ||
        "29423" === gu_qs.gupcon ||
        "30693" === gu_qs.gupcon ||
        "49429" === gu_qs.gupcon
      )
        console.log("Stripe enabled via qstring.");
      else if (site_vars.stripe_enable_worldwide)
        console.log("Stripe enabled for all countries.");
      else {
        var e = site_vars.stripe_selected_countries
            .toLowerCase()
            .replace(/[\s\uFEFF\xA0]/g, "")
            .split(",")
            .filter(function (e) {
              return !e.match(/z[1234567890]+/g) && !!e;
            }),
          t = gu_shippingZones.getZones(),
          i = site_vars.stripe_selected_countries
            .toLowerCase()
            .replace(/[\s\uFEFF\xA0]/g, "")
            .split(",")
            .filter(function (e) {
              return e.match(/z[1234567890]+/g) && !!e;
            });
        console.log("the selected zones", site_vars.stripe_selected_countries),
          i.forEach(function (i) {
            e = [].concat(
              _toConsumableArray(
                new Set(
                  e.concat(
                    Object.keys(t[i]).map(function (e) {
                      return e.toLowerCase();
                    })
                  )
                )
              )
            );
          });
        var n = gu_qs.gucountry;
        e.indexOf(n) === -1 &&
          window._guLogger.error(
            "Client country does not match listed zones",
            Error("Zone does not match"),
            {
              shopifyDomain: gu_shopify_domain,
              severity: "critical",
              user_country: gu_qs.gucountry,
            }
          );
      }
    }
    function O() {
      G = !0;
      var e = {
        country: site_vars.stripe_supported_country.value.toUpperCase(),
        currency: "usd",
        total: { label: "Subtotal", amount: 0, pending: !0 },
        requestPayerName: !0,
        requestPayerEmail: !0,
        requestShipping: !0,
      };
      window.isCheckoutPhoneRequired && (e.requestPayerPhone = !0),
        (oe = ee.paymentRequest(e));
      var t = te.create("paymentRequestButton", {
        paymentRequest: oe,
        style: { paymentRequestButton: { height: "50px" } },
      });
      oe.canMakePayment().then(function (e) {
        e
          ? (t.mount("#payment-request-button"),
            (re = e.applePay
              ? "applepay"
              : e.googlePay
              ? "googlepay"
              : "credit"),
            gu_offers.footerBadgeDisplay(re))
          : (document.getElementById("payment-request-button").style.display =
              "none");
      });
    }
    function P(e) {
      fetch(
        serverURL +
          "/v2/shopify/" +
          gu_shopify_domain +
          "/checkouts/" +
          B.checkout.token +
          "/shipping_rates?_=" +
          new Date().getTime(),
        {
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          method: "get",
        }
      )
        .then(function (e) {
          return e.json();
        })
        .then(function (t) {
          if (((Q = t.shipping_rates), 0 == Q.length))
            if (
              (console.log(
                "%c Shipping rates came back empty  :( Trying again.",
                "background: " +
                  warningYellow +
                  "; color: black; display: block; padding: 5px;"
              ),
              J > 5)
            ) {
              (J = 0),
                console.log(
                  "%c Failure in getting rates :( Status: " + t,
                  "background: " +
                    errorRed +
                    "; color: white; display: block; padding: 5px;"
                ),
                gu_events.error("Shipping rates came back empty 5 times.");
              var i = $(selectedBundle).attr("id");
              window._guLogger.error(
                "CODE RED: Failed to load shipping rates after 5 attempts.",
                null,
                {
                  selectedBundle: i,
                  shopifyDomain: gu_shopify_domain,
                  severity: "critical",
                }
              ),
                e.updateWith({ status: "invalid_shipping_address" });
            } else
              J++,
                gu_events.debug(
                  "Shipping rates came back empty. Trying again."
                ),
                setTimeout(function () {
                  P(e);
                }, 1e3);
          else {
            J = 0;
            var a = $.grep(t.shipping_rates, function (e) {
                return e.id.includes("Giddyup Rate Provider");
              }),
              o = [];
            console.log("fetched the shipping rates"),
              $.each(a, function () {
                (this.title = this.title.substring(1)),
                  (this.title = guSubstituteString(this.title));
              });
            for (var r = 0; r < a.length; r++) {
              var s = {};
              (s.id = a[r].id),
                (s.label = a[r].title),
                (s.amount = parseInt(a[r].price.replace(".", ""))),
                (s.tax = parseInt(a[r].checkout.total_tax.replace(".", ""))),
                o.push(s);
            }
            n(o[0].id, function () {
              (j = o),
                e
                  ? e.updateWith({
                      status: "success",
                      shippingOptions: j,
                      total: {
                        amount:
                          void 0 !== B.payment.amount
                            ? B.payment.amount
                            : Math.floor(100 * B.checkout.total_price),
                        label: "Total",
                        pending: !1,
                      },
                      displayItems: [
                        {
                          amount: parseInt(
                            B.checkout.subtotal_price.replace(".", "")
                          ),
                          label: "Subtotal",
                        },
                        {
                          amount: parseInt(
                            B.checkout.shipping_rate.price.replace(".", "")
                          ),
                          label: "Shipping",
                        },
                        {
                          amount: parseInt(
                            B.checkout.total_tax.replace(".", "")
                          ),
                          label: "Estimated Tax",
                        },
                      ],
                    })
                  : oe.update({
                      shippingOptions: j,
                      total: {
                        amount:
                          void 0 !== B.payment.amount
                            ? B.payment.amount
                            : Math.floor(100 * B.checkout.total_price),
                        label: "Total",
                        pending: !1,
                      },
                      displayItems: [
                        {
                          amount: parseInt(
                            B.checkout.subtotal_price.replace(".", "")
                          ),
                          label: "Subtotal",
                        },
                        {
                          amount: parseInt(
                            B.checkout.shipping_rate.price.replace(".", "")
                          ),
                          label: "Shipping",
                        },
                        {
                          amount: parseInt(
                            B.checkout.total_tax.replace(".", "")
                          ),
                          label: "Estimated Tax",
                        },
                      ],
                    }),
                gu_checkout_validation.togglePayPalButton("show");
            }),
              gu_checkout_validation.displayShippingOptions(a);
          }
        });
    }
    function F() {
      var e = { url: window.location.origin },
        t = new XMLHttpRequest();
      t.open("POST", serverURL + "/v2/" + gu_shopify_domain + "/origin_keys"),
        (t.responseType = "json"),
        (t.onreadystatechange = function () {
          4 == t.readyState &&
            t.status < 300 &&
            t.status >= 200 &&
            201 !== t.status &&
            (t.response && !t.response.hasOwnProperty("error")
              ? L(t.response.originKey[window.location.origin])
              : console.log(t.response));
        }),
        t.send(JSON.stringify(e));
    }
    function L(e) {
      function t(e, t) {
        e.isValid, e.data;
      }
      var i = {
        locale: "en_US",
        environment: "test",
        originKey: e,
        onChange: t,
      };
      (gu_payments.adyenCheckout = new AdyenCheckout(i)),
        (gu_payments.adyenCard = gu_payments.adyenCheckout
          .create("securedfields", {
            type: "card",
            brands: ["mc", "visa", "amex", "bcmc", "maestro"],
            styles: {
              error: { color: "red" },
              validated: { color: "green" },
              placeholder: { color: "#d8d8d8" },
            },
            ariaLabels: {
              lang: "en-GB",
              encryptedCardNumber: {
                label: "Credit or debit card number field",
              },
            },
            onChange: function () {},
            onValid: function () {},
            onLoad: function () {},
            onConfigSuccess: function () {},
            onFieldValid: function () {},
            onBrand: function () {},
            onError: function () {},
            onFocus: function () {},
            onBinValue: function (e) {},
          })
          .mount("#adyenCard-container"));
    }
    function T(e) {
      var t = null;
      return (t =
        "object" == ("undefined" == typeof e ? "undefined" : _typeof(e))
          ? e
          : JSON.parse(e));
    }
    function M(e) {
      return e.includes(".") ? (e = e.split(".").join("")) : (e += "00"), e;
    }
    function R(e) {
      var t = !1;
      switch (e[0]) {
        case "email":
          gu_checkout_validation.fieldMismatch("email");
          break;
        case "phone":
          gu_checkout_validation.fieldMismatch("phone");
          break;
        case "shipping_address":
          gu_checkout_validation.fieldMismatch("zip");
          break;
        case "shipping_line":
          gu_checkout_validation.fieldMismatch("zip");
          break;
        case "billing_address":
          gu_checkout_validation.fieldMismatch("zip", "billing"), (t = !0);
          break;
        default:
          gu_checkout_validation.fieldMismatch("zip");
      }
      t !== !0 && gu_checkout_validation.refreshShippingOptions();
    }
    var z = void 0,
      A = void 0,
      B = {
        checkout: void 0,
        gu_transaction_id: void 0,
        paymentMethod: void 0,
        shopify_domain: void 0,
        shopifydomain_checkout_token: void 0,
        payment: {
          id: void 0,
          payment_token: void 0,
          checkout_token: void 0,
          authorization: { id: "" },
          accept_language: "en-US",
          user_agent: navigator.userAgent,
          session_id: void 0,
          status: void 0,
        },
        intent: "AUTHORIZE",
      },
      N = {},
      j = [],
      U = {
        reference: "GiddyUp Test",
        originalReference: "",
        originalMerchantReference: "",
        additionalData: { authorisationType: "PreAuth" },
        amount: { currency: gu_currency, value: "" },
        paymentMethod: {
          type: "scheme",
          encryptedCardNumber: "",
          encryptedExpiryMonth: "",
          encryptedExpiryYear: "",
          encryptedSecurityCode: "",
          holderName: "",
        },
      },
      V = site_vars.v20_interim_shipping,
      H = site_vars.cc_processor,
      G = !1,
      W = !1;
    if ("undefined" != typeof gu_qs.gupcon)
      switch (gu_qs.gupcon) {
        case "08247":
          H = "shopify";
          break;
        case "11039":
          H = "stripe";
          break;
        case "29423":
          H = "stripealt";
          break;
        case "30693":
          H = "stripemobile";
          break;
        case "49429":
          H = "stripedesktop";
      }
    var J = 0,
      Q = [],
      Z = {},
      X = 0,
      Y = 0;
    1 == gu_qs.gu47 && ($("#promo_wrap").addClass("show"), p());
    var K = 0;
    "1" === gu_checkout_paypal_pay
      ? "1" === gu_checkout_native_paypal &&
        ($("#paypal-button").hide(),
        paypal
          .Buttons({
            style: {
              layout: "horizontal",
              color: "gold",
              shape: "rect",
              label: "paypal",
              tagline: !1,
              height: 50,
              fundingicons: "false",
            },
            createOrder: function (e, t) {
              return (
                gu_events.fireAndLogEvent(gu_events.eventList.paypalClicked),
                gu_payments.setPaymentMethod("paypal"),
                fetch(
                  serverURL +
                    "/v2/payments/" +
                    gu_shopify_domain +
                    "/transactions/create",
                  {
                    headers: {
                      "Content-Type": "application/x-www-form-urlencoded",
                    },
                    method: "post",
                    body: JSON.stringify(gu_payments.order),
                  }
                )
                  .then(function (e) {
                    return e.json();
                  })
                  .then(function (e) {
                    var t = e;
                    return "undefined" == typeof t.payment.id
                      ? (gu_events.error("Failure creating Paypal order"), null)
                      : (console.log(
                          "%c Paypal order created! ",
                          "background: " +
                            successGreen +
                            "; color: white; display: block; padding:5px;"
                        ),
                        gu_payments.syncOrder(e),
                        t.payment.id);
                  })
              );
            },
            onApprove: function (e, t) {
              return (
                gu_checkout.alert("show"),
                fetch(
                  serverURL +
                    "/v2/payments/" +
                    gu_shopify_domain +
                    "/transactions/" +
                    gu_payments.order.gu_transaction_id,
                  {
                    headers: {
                      "Content-Type": "application/x-www-form-urlencoded",
                    },
                    method: "post",
                    body: JSON.stringify(gu_payments.order),
                  }
                )
                  .then(function (e) {
                    return e.json();
                  })
                  .then(function (e) {
                    return (
                      console.log(
                        "%c Paypal order posted! ",
                        "background: " +
                          successGreen +
                          "; color: white; display: block; padding:5px;"
                      ),
                      (gu_payments.order.checkout = {
                        checkout: gu_payments.order.checkout,
                      }),
                      gu_events.fireAndLogEvent(
                        gu_events.eventList.shippingInfo
                      ),
                      gu_payments.syncOrder(e, !0),
                      window._guLogger.debug("testing paypal data on dev.", {
                        severity: "low",
                        gudata: e,
                      }),
                      gu_payments.updateOrder(function () {
                        gu_payments.getShippingRates();
                      }),
                      gu_checkout.alert("hide"),
                      null
                    );
                  })
              );
            },
          })
          .render("#paypal-button-container"))
      : ($("#paypal-button").hide(), $(".or-pay-with").hide());
    var ee = void 0,
      te = void 0,
      ie = {
        base: {
          color: "#000",
          fontFamily: "Arial, sans-serif",
          fontSmoothing: "antialiased",
          fontSize: "16px",
          "::placeholder": { color: "#7a7a7a" },
        },
        invalid: {
          fontFamily: "Arial, sans-serif",
          color: "#ff1b1b",
          iconColor: "#ff1b1b",
        },
      },
      ne = void 0,
      ae = !1,
      oe = void 0,
      re = null;
    "shopify" != H && D()
      ? ((ee =
          "undefined" == typeof Stripe
            ? window.Stripe(site_vars.stripe_key)
            : Stripe(site_vars.stripe_key)),
        (te = ee.elements()),
        "stripe" === H ||
        (isMobile.any && "stripemobile" === H) ||
        (!isMobile.any && "stripedesktop" === H)
          ? ((ne = te.create("card", { style: ie })), q(), O())
          : "stripealt" === H
          ? (O(), $("#payment-form").hide())
          : ($("#payment-form").hide(), $("#payment-request-button").hide()))
      : ($("#payment-form").hide(), $("#payment-request-button").hide());
    var se = {},
      le = {};
    return (
      "adyen" === site_vars.cc_processor && F(),
      {
        startCart: e,
        createOrder: t,
        getShippingRates: i,
        selectShippingRate: n,
        refreshShipping: a,
        getPrices: o,
        completeOrder: s,
        restoreOrder: r,
        paypalRedirect: S,
        submitPromoCode: c,
        validatePromo: u,
        stripeValidation: ae,
        paymentProcessorSetting: H,
        stripeGeoAvailability: D,
        order: B,
        setPaymentMethod: _,
        syncOrder: x,
        updateOrder: f,
        adyenCheckout: se,
        adyenCard: le,
      }
    );
  })(),
  _typeof =
    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
      ? function (e) {
          return typeof e;
        }
      : function (e) {
          return e &&
            "function" == typeof Symbol &&
            e.constructor === Symbol &&
            e !== Symbol.prototype
            ? "symbol"
            : typeof e;
        },
  gu_checkout = (function () {
    function e(e) {
      if (e) {
        $(y).slideUp(), $(b).slideUp(), $(k).slideUp(), $(w).slideUp();
        var t = [];
        gu_checkout.cart.forEach(function (e) {
          t.push({ variant_id: e.variant_id, quantity: e.qty });
        }),
          gu_payments.startCart(t);
      } else gu_offer_events.startExtras();
    }
    function t(e, t) {
      var i = void 0,
        n = void 0,
        a = void 0,
        o = void 0;
      if (
        ((i = n = a = o = 0),
        "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)))
      )
        (o = e.promo ? e.promo : 0),
          (i = e.tax ? e.tax : 0),
          (n = e.shipping ? e.shipping : 0),
          (a = e.total ? e.total : 0);
      else {
        var r = [];
        $.each(gu_checkout.cart, function (e, t) {
          r.push(t.price * t.qty);
        }),
          $.each(r, function (e, t) {
            a = Big(a).add(t);
          }),
          (a = a.toFixed(2));
      }
      0 !== o &&
        ($(T).closest(".promo").removeClass("hidden"),
        $(T).text("- " + gu_common.guDisplayCurrency(o))),
        0 !== i && $(M).text(gu_common.guDisplayCurrency(i)),
        0 !== n && $(R).text(gu_common.guDisplayCurrency(n));
      var s = gu_common.guDisplayCurrency(a);
      $(z).attr("data-total", a).text(s),
        $(A).text(s),
        setTimeout(function () {
          $(F).fadeOut("slow");
        }, 500);
    }
    function i() {
      (gu_checkout.cart = []), gu_checkout.updatePrices();
    }
    function n() {
      $(N).length || $(x).wrapAll("<div class='" + B + "'></div>"),
        $(N).empty(),
        (gu_checkout.cart = []);
    }
    function a(e, t, i) {
      $(F).length
        ? $(F).is(":visible") || $(F).show()
        : $(f).prepend(
            "<div class='" +
              P +
              '\'><img width="60" height="60" alt="Loading..." src="' +
              L +
              '" loading="lazy"/></div>'
          );
      var n = gu_checkout.createProductHTML(e);
      if (
        ($(N).append(n.html),
        gu_checkout.cart.push({
          upi: n.upi,
          product_id: e.product_id,
          variant_id: e.variant_id,
          name: e.name,
          subtitle: e.subtitle,
          price: e.price,
          qty: e.qty,
          weight: e.weight,
          sku: e.sku,
          tags: gu_products.getPriceInfoForProduct(e.product_id),
          bundle_name: e.bundle_name,
          type: e.type,
        }),
        void 0 !== e.bundle_name && void 0 !== e.bundle_id)
      ) {
        var a = gu_checkout.cart[gu_checkout.cart.length - 1];
        (a.bundle_name = e.bundle_name), (a.bundle_id = e.bundle_id);
      }
      return (
        t
          ? $(u).is(":visible")
            ? gu_checkout.updatePrices()
            : (console.log(
                "%c Cannot update server cart while the checkout is hidden! :( ",
                "background: #240100; color: #ef8783; display: block; padding: 10px 5px; border-top: 1px solid #540a04; border-bottom: 1px solid #540a04; "
              ),
              console.log(
                "%c This is not a serious error. Everything continued to work as it should. If you want to learn more, please refer to the guCheckout owner's manual. ",
                "background: #240100; color: #ababab; font-style: italic; display: block; padding: 5px;"
              ))
          : (gu_checkout.updatePrices(!1, !0), gu_offer_events.showTotalbar()),
        n.upi
      );
    }
    function o(e, t, i) {
      if (
        (void 0 !== t.name &&
          $(q, x + '[data-upi="' + e + '"]').text(l(t.name)),
        void 0 !== t.subtitle
          ? $(D, x + '[data-upi="' + e + '"]')
              .text(l(t.subtitle))
              .show()
          : $(D, x + '[data-upi="' + e + '"]').hide(),
        void 0 !== t.price)
      ) {
        var n = Big(t.price).mul(t.qty);
        $(I, x + '[data-upi="' + e + '"]').text(gu_common.guDisplayCurrency(n));
      }
      void 0 !== t.qty && $(E, x + '[data-upi="' + e + '"]').text(t.qty),
        void 0 !== t.img &&
          $(S, x + '[data-upi="' + e + '"]')
            .attr("src", t.img)
            .attr("srcset", t.img)
            .attr("data-cfsrc", t.img)
            .attr("loading", "lazy");
      for (var a = 0; a < gu_checkout.cart.length; a++)
        gu_checkout.cart[a].upi === e &&
          (void 0 !== t.name && (gu_checkout.cart[a].name = t.name),
          void 0 !== t.price && (gu_checkout.cart[a].price = t.price),
          void 0 !== t.qty && (gu_checkout.cart[a].qty = t.qty),
          void 0 !== t.product_id &&
            (gu_checkout.cart[a].product_id = t.product_id),
          void 0 !== t.variant_id &&
            (gu_checkout.cart[a].variant_id = t.variant_id),
          void 0 !== t.subtitle && (gu_checkout.cart[a].subtitle = t.subtitle),
          void 0 !== t.weight && (gu_checkout.cart[a].weight = t.weight),
          void 0 !== t.sku && (gu_checkout.cart[a].sku = t.sku),
          void 0 !== t.tags && (gu_checkout.cart[a].tags = t.tags),
          void 0 !== t.bundle_name &&
            (gu_checkout.cart[a].bundle_name = t.bundle_name),
          void 0 !== t.type && (gu_checkout.cart[a].type = t.type));
      i
        ? $(u).is(":visible")
          ? gu_checkout.updatePrices()
          : (console.log(
              "%c Cannot update server cart while the checkout is hidden! :( ",
              "background: #240100; color: #ef8783; display: block; padding: 10px 5px; border-top: 1px solid #540a04; border-bottom: 1px solid #540a04; "
            ),
            console.log(
              "%c This is not a serious error. Everything continued to work as it should. If you want to learn more, please refer to the guCheckout owner's manual. ",
              "background: #240100; color: #ababab; font-style: italic; display: block; padding: 5px;"
            ))
        : (gu_checkout.updatePrices(!1, !0), gu_offer_events.showTotalbar());
    }
    function r(e, t) {
      $(x + '[data-upi="' + e + '"]').remove();
      for (var i = 0; i < gu_checkout.cart.length; i++)
        gu_checkout.cart[i].upi === e && gu_checkout.cart.splice(i, 1);
      t
        ? $(u).is(":visible")
          ? gu_checkout.updatePrices()
          : (console.log(
              "%c Cannot update server cart while the checkout is hidden! :( ",
              "background: #240100; color: #ef8783; display: block; padding: 10px 5px; border-top: 1px solid #540a04; border-bottom: 1px solid #540a04; "
            ),
            console.log(
              "%c This is not a serious error. Everything continued to work as it should. If you want to learn more, please refer to the guCheckout owner's manual. ",
              "background: #240100; color: #ababab; font-style: italic; display: block; padding: 5px;"
            ))
        : gu_checkout.updatePrices(!1, !0);
    }
    function s(e) {
      var t = $(C),
        i = "upi-" + Math.floor(1e9 * Math.random());
      t.attr("data-upi", i),
        void 0 === e.name && (e.name = "Error: Missing Product Name"),
        t.find(q).text(l(e.name)),
        void 0 !== e.subtitle
          ? t.find(D).text(l(e.subtitle)).show()
          : t.find(D).hide(),
        void 0 === e.img && (e.img = O),
        t
          .find(S)
          .attr("src", e.img)
          .attr("srcset", e.img)
          .attr("data-cfsrc", e.img)
          .attr("loading", "lazy"),
        void 0 === e.qty && (e.qty = 1),
        t.find(S).after('<div class="qty">' + e.qty + "</div>"),
        void 0 === e.price && (e.price = "0");
      var n = Big(e.price).mul(e.qty).toFixed(2);
      return (
        t.find(I).text(gu_common.guDisplayCurrency(n)), { upi: i, html: t }
      );
    }
    function l(e) {
      var t = e,
        i = t.split("-");
      if (i.length > 1) {
        for (var n = "", a = 0; a < i.length; a++) {
          var o = gu_common.guSubstituteString(i[a].trim());
          (n += o), a != i.length - 1 && (n += " - ");
        }
        t = n;
      } else t = gu_common.guSubstituteString(e);
      return t;
    }
    function d() {
      return $(z).attr("data-total");
    }
    function c(e, t) {
      "show" === e.toLowerCase()
        ? ($(g + " .overlay").show(),
          $(g + " .confirmation").hide(),
          $("#custom_pages_overlay").show(),
          $(g).fadeIn().css("pointer-events", "auto"),
          void 0 === t ? $(_).hide() : ($(_).text(t), $(_).show()),
          gu_offer_events.scrollTo($(u)))
        : "confirm" === e.toLowerCase()
        ? ($(g + " .overlay").hide(),
          $("#custom_pages_overlay").hide(),
          $(g + " .confirmation").show(),
          $(g).fadeIn().css("pointer-events", "auto"),
          void 0 === t ? $(h).hide() : ($(h).text(t), $(_).show()))
        : "hide" === e.toLowerCase()
        ? ($(g).fadeOut().css("pointer-events", "none"),
          $("#custom_pages_overlay").fadeOut().css("pointer-events", "none"))
        : "" === e &&
          ($(g).fadeOut().css("pointer-events", "none"),
          $("#custom_pages_overlay").fadeOut().css("pointer-events", "none"));
    }
    var u = "#checkout",
      p = "#checkout-form",
      f = u + " .details",
      g = u + " #checkout-alert",
      _ = g + " .text",
      h = g + " .text p",
      v = g + " .confirmation a",
      m = "#mobile-order-summary",
      y = "#main-wrapper .additional-footer-message",
      b = "#footer",
      k = "#footer-badges, .mobile-only.guarantee",
      w = '#faq, div[class*="faq"]',
      x = f + " .product",
      C = $("<div />").append($(x).eq(0).clone()).html(),
      S = ".img img",
      E = ".img .qty",
      q = ".name h6",
      D = ".name .subtitle",
      I = ".price h6",
      O = checkoutScript.theme_directory + "/images/missing-image.jpg",
      P = "prod-loading-animation",
      F = f + " ." + P,
      L =
        checkoutScript.theme_directory +
        "/images/checkout-loading-compressed.gif",
      T = f + " .promo .price h6",
      M = f + " .tax .price h6",
      R = f + " .shipping .price h6",
      z = f + " .total .price h6",
      A = m + " .price p",
      B = "product-wrapper",
      N = f + " ." + B;
    return (
      $(v).click(function () {
        gu_checkout.alert("hide");
      }),
      $(p).prepend($(g)),
      {
        createProductHTML: s,
        addProduct: a,
        removeProduct: r,
        updateProduct: o,
        initCart: n,
        clearCart: i,
        updatePrices: t,
        getTotal: d,
        alert: c,
        startCheckout: e,
      }
    );
  })();
gu_checkout.initCart(),
  jQuery(function (e) {
    e(document).ready(function () {
      if (e(".easysteps-section").length) {
        var t = ".easysteps-section",
          i = e(t).data("block-id");
        e("#easysteps-modal-" + i, e(t)).appendTo("body");
        var n = e(
          e(".modal-link-placeholder", e(t)).length
            ? e(".modal-link-placeholder", e(t))
            : e(".button-continue a", e(t))
        ).text();
        "" != n
          ? e(".easysteps-modal-link span", e(t)).text(guSubstituteString(n))
          : e(".easysteps-modal-link span", e(t)).remove();
      }
      e(document)
        .on("shown.bs.modal", ".video-modal", function (t) {
          var i = e("iframe", e(this)).attr("src");
          void 0 === e("iframe", e(this)).attr("data-src") &&
            ((i +=
              (i.indexOf("?") > -1 ? "&" : "?") +
              "autoplay=1&modestbranding=1&showinfo=0&rel=0"),
            e("iframe", e(this)).attr("data-src", i));
          var n = e("iframe", e(this)).data("src");
          e("iframe", e(this)).attr("src", n),
            e("iframe", e(this)).attr("loading", "lazy");
        })
        .on("hide.bs.modal", ".video-modal", function (t) {
          e("iframe", e(this)).attr("src", "");
        });
    });
  }),
  jQuery(function (e) {
    e(document).ready(function () {
      if (e('.shortcode-modal[data-opener="on-page"]').length) {
        var t = ".shortcode-modal";
        e(t).each(function () {
          var t = e(this).attr("data-id");
          e("a[href]").each(function () {
            var i = e(this).attr("href").split("#");
            i.length > 1 &&
              i[1] == t &&
              e(this)
                .contents()
                .unwrap()
                .wrap(
                  '<span class="shortcode-link" data-toggle="modal" data-target="#' +
                    t +
                    '"/>'
                );
          }),
            e(this).attr("id", t);
        });
      }
      if (
        e('.shortcode-modal[data-opener="link"]').length ||
        e('.shortcode-modal[data-opener="button"]').length
      ) {
        var i = ".shortcode-modal";
        e(i).each(function () {
          var t = e(this).attr("data-id");
          e(this).attr("id", t);
        });
      }
    });
  }),
  console.log("did this load up at all for staging?");
var $upsell = $(".upsell"),
  finduserselected = "";
if (
  ($(".gu-extras").addClass("bundle-extra"),
  $upsell.length && $upsell.css("height", "auto"),
  "undefined" != typeof gu_qs.guoffer)
)
  var activeOfferName = window.gu_ua.guoffer;
var offerEventData = window.upsellData.offer_event_data,
  eventData = offerEventData,
  offerEventStatus = window.upsellData.offer_event_status,
  upsellIndex = 0,
  upsellsVisible = !1,
  variantVisible = !1,
  bundleSelected = void 0;
(offerEventStatus.checkout_status = "page_load"),
  (offerEventStatus.upsellsRemaining = eventData.length);
var gu_offer_events = (function () {
  function e() {
    var e = this;
    (e.popup = []),
      (e.inline = []),
      (e.clear = function () {
        (e.popup = []), (e.inline = []);
      }),
      (e.isShown = function () {
        return e.popup.length > 0 || e.inline.length > 0;
      });
  }
  function t(e) {
    $("html, body").stop().animate({ scrollTop: e.offset().top }, 500);
  }
  function i() {
    return E <= D;
  }
  function n() {
    var e = document.querySelector(".bundle.selected");
    return null !== e ? e.id : "";
  }
  function a() {
    function e() {
      d
        ? (u.modal(),
          showUpsellPopUp(l),
          $(".button", $('[data-slug="' + l + '"]')).removeClass("disabled"),
          I.popup.push(!0))
        : (u.slideDown(),
          gu_events.fireAndLogEvent(gu_events.eventList.viewInlineUpsell),
          I.inline.push(!0),
          setTimeout(function () {
            t(u);
          }, 500)),
        void 0 === offerEventData[E] ||
          offerEventData[E].hasOwnProperty("upsell_seen") ||
          (offerEventData[E].upsell_seen = !0),
        E + 1 < D && (o(), r()),
        offerEventStatus.upsellsRemaining--,
        E++;
    }
    var i = $(".upsell.bundle-extra").is(":visible"),
      s = eventData[E];
    if (null === s.upsell_name)
      return (
        offerEventStatus.upsellsRemaining--,
        E++,
        void (offerEventStatus.upsellsRemaining > 0 ? a() : c())
      );
    var l = s.upsell_name.toString(),
      d = "popup" === s.upsell_type,
      u = $("#" + l);
    i &&
      setTimeout(function () {
        t(u);
      }, 500),
      null === s.bundle_to_trigger_upsell
        ? e()
        : s.bundle_to_trigger_upsell === n()
        ? e()
        : (offerEventStatus.upsellsRemaining--,
          E++,
          offerEventStatus.upsellsRemaining > 0 ? a() : c());
  }
  function o() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
    "undefined" == typeof o.displayMode && (o.displayMode = ""),
      "" === o.displayMode && "" === e
        ? (g.attr("data-display-type", "checkout"),
          $("body").addClass("totalbar-shown"))
        : "hide" === e
        ? (g.attr("data-display-type", "hide"),
          setTimeout(function () {
            g.attr("data-display-type", ""),
              $("body").removeClass("totalbar-shown");
          }, 1e3))
        : "next" === e
        ? ((o.displayMode = "next"),
          g.attr("data-display-type", "next"),
          $("body").addClass("totalbar-shown"))
        : "checkout" === e &&
          ((o.displayMode = ""),
          g.attr("data-display-type", "checkout"),
          $("body").addClass("totalbar-shown")),
      f.is(":visible") && f.slideUp();
  }
  function r() {
    if ((gu_checkout.updatePrices(), void 0 !== gu_checkout.getTotal())) {
      g.attr("data-display-total", parseInt(gu_checkout.getTotal()));
      var e =
        gu_common.guSubstituteString("Total: ") +
        gu_common.guDisplayCurrency(gu_checkout.getTotal());
      _.html(e);
    }
  }
  function s(e) {
    offerEventStatus.checkout_status = e;
  }
  function l() {
    var e = !0,
      t = !1,
      i = void 0;
    try {
      for (
        var n, a = eventData[Symbol.iterator]();
        !(e = (n = a.next()).done);
        e = !0
      ) {
        var o = n.value;
        eventData.hasOwnProperty(o) &&
          o.upsell_seen === !0 &&
          ((upsellsVisible = !0), (o.upsell_seen = !1));
      }
    } catch (r) {
      (t = !0), (i = r);
    } finally {
      try {
        !e && a["return"] && a["return"]();
      } finally {
        if (t) throw i;
      }
    }
    f.is(":visible") && f.slideUp(),
      S.is(":visible") && S.slideUp(),
      S.length && S.css("height", "auto"),
      (E = 0),
      (eventData = offerEventData),
      (offerEventStatus.upsellsRemaining = eventData.length),
      (D = eventData.length);
  }
  function d() {
    m.slideUp(), h.slideUp(), v.slideUp(), y.slideUp(), b.slideUp();
    var e = n();
    (eventData = offerEventData.filter(function (t) {
      return (
        t.bundle_to_trigger_upsell === e || null === t.bundle_to_trigger_upsell
      );
    })),
      (offerEventStatus.upsellsRemaining = eventData.length);
    var t = gu_vs.check(),
      i = q.is(":visible");
    if (t) return i || q.addClass(p), gu_vs.update(), void r();
    n();
    s("bundle_selected"), offerEventStatus.upsellsRemaining > 0 ? a() : c();
  }
  function c() {
    return (
      !gu_vs.addonCheck() &&
      void (offerEventStatus.upsellsRemaining > 0
        ? a()
        : (o("hide"),
          f.slideDown("slow"),
          s("checkout_initiated"),
          setTimeout(function () {
            t(f);
          }, 1e3),
          $(C).css({ opacity: "0", "pointer-events": "none" }),
          gu_upsell_checkout.displayCheckoutUpsells(),
          gu_checkout.startCheckout(!0),
          gu_events.fireAndLogEvent(gu_events.eventList.checkoutInitiated)))
    );
  }
  function u() {
    k.on("click", function () {
      k.toggleClass("active"), w.scrollTop(0);
    }),
      $(".cta-button").on("click", function () {
        console.log("did it click");
        var e = $(this);
        finduserselected = e.parent().parent().attr("id");
      }),
      $("#offer .bundle, .additional-offer .bundle").click(function () {
        var e = $(this);
        finduserselected = e[0].id;
      }),
      x.on("click", function (e) {
        if ((e.preventDefault(), gu_offer_events.upsellDisplay.isShown())) c();
        else if ("" !== n()) {
          var t = $('.bundle[data-slug="' + n() + '"]');
          "fixed" === $(t).data("bundle-qty") || gu_vs.check()
            ? c()
            : $(".cta-button", $(t)).click();
        } else c();
      }),
      window.addEventListener(
        "orientationchange",
        function () {
          $("#checkout").is(":visible") &&
            setTimeout(function () {
              gu_offer_events.scrollTo($("#checkout"));
            }, 300);
        },
        !1
      );
  }
  var p = "bundle-extra",
    f = $("#checkout"),
    g = $("#total-bar"),
    _ = g.find(".price"),
    h = $("#footer-badges"),
    v = $(".guarantee.mobile-only"),
    m = $("#faq"),
    y = $("#footer, div[class^=footer]"),
    b = $(".additional-footer-message"),
    k = f.find(".mobile-nav"),
    w = f.find(".details .content"),
    x = g.find(".checkout"),
    C = "#yoHolder",
    S = $(".upsell"),
    E = 0,
    q = $("#variant-selector"),
    D = eventData.length,
    I = new e();
  return {
    init: u,
    startExtras: d,
    checkout: c,
    scrollTo: t,
    checkForExtras: i,
    showTotalbar: o,
    updateTotalbarTotal: r,
    showNextHiddenExtra: a,
    upsellStatusReset: l,
    getCurrentBundle: n,
    upsellDisplay: I,
  };
})();
gu_offer_events.init();
var currentUrl = window.location.href,
  offer = "#offer",
  bundleClass = ".bundle",
  bundles = offer + " " + bundleClass,
  extras = ".extras",
  quantity_el = ".qty",
  ribbon_el = ".ribbon",
  ribbonTxt_el = "h6",
  qtyActivator = ".qtyActivator",
  selectedClass = "selected",
  checkmark = ".checkbox input",
  bundleData = componentOffer.bundle_info,
  bundleNumber = 0;
window.mobileDevice =
  (window.innerWidth > 0 ? window.innerWidth : screen.width) <= 767;
var variant_type =
  void 0 !== bundleData[0]
    ? bundleData[0].bundle_object[0].bundle_variant_info.options[0].name
    : "";
window.allowMultipleBundles = "upgrade" == variant_type.toLowerCase();
for (
  var offers_arr = document.querySelectorAll(bundles), i = 0;
  i < offers_arr.length;
  i++
) {
  var offer_id = offers_arr[i].getAttribute("id"),
    offer_el = document.getElementById("#" + offer_id),
    selectedBundle = $(".bundle.selected");
  selectedBundle.length &&
    $(".checkbox input", $(selectedBundle)).prop("checked", !0);
}
$(".bundle").each(function () {
  var e = $(this);
  if ("undefined" != typeof e.data("chu")) {
    var t = e.data("chu"),
      i = gu_qs_to_str(gu_qs);
    if (t.match("ref=")) {
      var n = t.split("ref=")[0],
        a = encodeURIComponent(window.location);
      t = n + "ref=" + a;
    } else t += i;
    e.bind("click", function () {
      window.location = t;
    });
  }
});
var gu_offers = (function () {
  function e() {
    $(".deferred-load").each(function () {
      var e = $(this).data("src");
      $(this).attr("src", e).removeClass("deferred-load");
    });
  }
  function t(e) {
    if (void 0 !== e) {
      var t = $("#footer-badges");
      $("[data-payment-accepted]", $(t)).each(function () {
        e === $(this).data("payment-accepted") && $(this).show();
      });
    }
  }
  function i() {
    if (
      "en" !== window.gu_language &&
      $(this).is(":visible") &&
      "auto" === $(this).css("clip")
    ) {
      var e = $(this).children(),
        t = parseInt($(this).css("font-size"));
      "" === $(this).attr("data-translation-textsizer")
        ? (0 === e.length &&
            ($(this).wrapInner("<span></span>"), (e = $("span", $(this)))),
          t !== parseInt($(e).css("font-size")) &&
            $(e).css("font-size", t + "px"),
          $(this).attr("data-translation-textsizer", t))
        : t > parseInt($(e).css("font-size")) &&
          ($(e).css("font-size", t + "px"),
          $(this).attr("data-translation-textsizer", t));
      var i = 0;
      "none" !== $(this).css("transform") &&
        (i = $(this).height() * (window.innerWidth >= 768 ? 2 : 2.25) + 2);
      var n = $(this).width() - i,
        a = parseInt($(this).attr("data-translation-textsizer"));
      $(e).css("font-size", a + "px");
      for (var o = $(e).width(), r = 1; o > n && r < 10; )
        (a = parseInt($(e).css("font-size"))),
          $(e).css("font-size", a - r + "px"),
          (o = $(e).width()),
          (n = $(this).width() - i),
          r++;
    }
  }
  function n(e) {
    bundleData.filter(function (t, i) {
      return t.bundle_slug === e && (bundleNumber = i), bundleNumber;
    });
  }
  function a(e) {
    var t = $(bundles + ".selected").data("slug"),
      i = $("#offer").data("title"),
      n = $(bundles + ".selected").attr("data-bundle-qty"),
      a = $("#offer .bundle.selected").data("index");
    if (void 0 === a) return !1;
    var o = bundleData[a - 1].bundle_object,
      r = a,
      s = o[0].bundle_variant_info.id;
    d.length > 0 &&
      ($.each(d, function (e, t) {
        gu_checkout.removeProduct(t);
      }),
      (d = []));
    var l = [];
    (l =
      "undefined" != typeof discount_bundle_object
        ? o.concat(discount_bundle_object)
        : o),
      $.each(l, function (e, a) {
        if (a.bundle_variant_info.variants.length > 1)
          return void console.log("Product has variants");
        var o =
            "fixed" != n
              ? $(bundles + "." + selectedClass + " " + quantity_el).text()
              : 1,
          c = a.discount > 0;
        if (~n.indexOf("conditional")) {
          var u = n.split("-")[1];
          if (o > u) {
            if (l.length > 1)
              if (c) {
                if (s != a.pid) return;
                o -= u;
              } else o = u;
          } else if (c) return;
        }
        var p = {
          product_id: a.bundle_variant_info.variants[0].product_id,
          variant_id: a.bundle_variant_info.variants[0].id,
          name: a.bundle_variant_info.title,
          price: a.bundle_variant_info.variants[0].price,
          qty: a.qty * o,
          weight:
            a.bundle_variant_info.weight + a.bundle_variant_info.weight_unit,
          img: a.bundle_variant_info.images[0]
            ? a.bundle_variant_info.images[0].src
            : "/wp-content/themes/giddyupio-prototype/images/image-placeholder.png",
          sku: a.bundle_variant_info.variants[0].sku,
          tags: gu_products.getPriceInfoForProduct(
            a.bundle_variant_info.variants[0].product_id
          ),
          bundle_name: i,
          bundle_id: t,
          bundle_position: r,
          type: "bundle",
        };
        (null !== p.product_id && "" !== p.product_id) ||
          (console.log("product data came back null"),
          window._guLogger.error(
            "CODE RED: Shopify Product Error. Product ID not found in Shopify store.",
            Error("Product ID not found"),
            {
              shopifyDomain: gu_shopify_domain,
              severity: "critical",
              bundle_id: t,
              variants: a.bundle_variant_info.variants[0],
            }
          )),
          (null !== p.variant_id && "" !== p.variant_id) ||
            (console.log("variant data came back null"),
            window._guLogger.error(
              "CODE RED: Shopify Variant Error. ShopifyData Product ID not found in Shopify store.",
              Error("Product ID not found"),
              {
                shopifyDomain: gu_shopify_domain,
                severity: "critical",
                bundle_id: t,
                variants: a.bundle_variant_info.variants[0],
              }
            ));
        var f = 0,
          g = "";
        gu_checkout.cart.forEach(function (e, t) {
          p.product_id === e.product_id && ((f = e.qty + 1), (g = e.upi));
        });
        try {
          if (0 == f) {
            var _ = gu_checkout.addProduct(p);
            d.push(_);
          } else (p.qty = f), gu_checkout.updateProduct(g, p);
        } catch (h) {
          console.error("Failure to add or update cart in offer \r\n", h);
        }
      }),
      e && gu_checkout.startCheckout(),
      gu_events.fireAndLogEvent(gu_events.eventList.bundleSelected);
  }
  function o(e) {
    var t = $(e.currentTarget),
      i = $(e.target).closest(".checkout").length,
      n = $(e.target).closest(".next").length,
      o = $(t).attr("data-index"),
      s = $(t).data("bundle-qty"),
      l = $(e.target).closest("[data-quantify]").length,
      d = ($(".qty", $(t)).text(), !(!i && !n && "fixed" != s));
    $(e.target).closest(".no-checkout").length && (d = !1),
      console.log(t),
      bundleData.forEach(function (e) {
        e.hasOwnProperty("selected_bundle") && delete e.selected_bundle;
      }),
      window.allowMultipleBundles
        ? i || l
          ? $(bundles).each(function () {
              if (
                $(this).hasClass("selected") ||
                0 !== parseInt($(".qty", $(this)).text())
              ) {
                $(this).addClass("selected");
                var e = $(this).data("slug"),
                  t = bundleData.find(function (t, i) {
                    if (t.bundle_slug === e)
                      return (t.selected_bundle = !0), !0;
                  });
                void 0 === t &&
                  console.error("Qty selector: Not able to select bundle");
              }
            })
          : (0 === parseInt($(".qty", $(t)).text()) &&
              ($(".qty", $(t)).text("1"), (d = !0)),
            $(bundles).each(function () {
              if (0 !== parseInt($(".qty", $(this)).text())) {
                $(this).addClass("selected");
                var e = $(this).data("slug"),
                  t = bundleData.find(function (t, i) {
                    if (t.bundle_slug === e)
                      return (t.selected_bundle = !0), !0;
                  });
                void 0 === t &&
                  console.error("Qty selector: Not able to select bundle");
              }
            }))
        : (bundleData[o - 1].selected_bundle = !0),
      d
        ? (r($(t)), a(!0))
        : mobileDevice && (console.log("this is mobile"), r($(t)), a(!1)),
      gu_offer_events.updateTotalbarTotal();
  }
  function r(e) {
    if (window.allowMultipleBundles) {
      var t = $(".bundle-qty-selector", $(e));
      if (t.length) {
        var i = parseInt($(t).data("start-qty")),
          n = parseInt($(".qty", $(t)).text());
        n <= i
          ? (e.removeClass("author-selected"),
            e.removeClass(selectedClass),
            $(checkmark, $(e)).prop("checked", !1))
          : (e.addClass(selectedClass), $(checkmark, $(e)).prop("checked", !0));
      }
    } else
      e.hasClass(selectedClass) ||
        ($(bundles).removeClass("author-selected"),
        $(bundles).removeClass(selectedClass),
        $(checkmark).prop("checked", !1),
        e.addClass(selectedClass),
        $(checkmark, $(e)).prop("checked", !0));
  }
  function s(e) {
    var t =
        arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
      i = $(e).hasClass(bundleClass)
        ? e
        : $(e.currentTarget).closest(bundleClass),
      n = $(".bundle-qty-selector", $(i)),
      a = parseInt($(n).data("start-qty")),
      o = null != t ? t : $(e.currentTarget).data("quantify"),
      s = $(".qty", $(n)),
      l = Math.max(0 == a ? 0 : 1, parseInt($(s).text()) + parseInt(o));
    $(s).text(l).trigger("change"),
      0 == a &&
        (l > 0
          ? $(".checkout.visually-hidden", $(i)).trigger("click")
          : (r($(i)), gu_vs.check() && gu_vs.update()));
  }
  function l() {
    !(function () {
      $(".hidden").hide(),
        $(bundles).each(function () {
          if (this.classList.contains("selected")) {
            var e = this.getAttribute("data-index");
            bundleData[e - 1].selected_bundle = !0;
          }
        });
    })(),
      $(window)
        .on("load", function () {
          $("[data-translation-textsizer]").each(i);
        })
        .on("resize", function () {
          clearTimeout(window.resizedFinished),
            (window.resizedFinished = setTimeout(function () {
              $("[data-translation-textsizer]").each(i);
            }, 100));
        }),
      $(document)
        .on("click", ".cta.checkout.mobile, .cta.next.mobile", function (e) {
          e.preventDefault();
          var t = document.querySelector(".bundle.selected");
          $(".cta-button", $(t)).click(), $(this).hide();
        })
        .on("click", bundles, function (e) {
          e.preventDefault(), o(e);
        })
        .on("click", "[data-quantify]", function (e) {
          s(e), window.allowMultipleBundles && o(e);
        });
  }
  $("#checkout"), $("#chat-widget-container"), $("#footer");
  $(window).on("load", e),
    $('body[class*="lang-"]').length > 0 &&
      ($("body").removeClass(function (e, t) {
        return (t.match(/(^|\s)lang-\S+/g) || []).join(" ");
      }),
      $("body").addClass("lang-" + window.gu_language));
  var d = [];
  return (
    (function () {
      var e = $("#google-translate");
      e.length &&
        setTimeout(function () {
          $(".goog-logo-link", e).removeAttr("href");
        }, 1e3);
    })(),
    { init: l, getActiveBundle: n, footerBadgeDisplay: t, loadDeferredVideo: e }
  );
})();
gu_offers.init();
var gu_upsell_checkout = (function () {
  function e() {
    t(),
      $(".inline-upsell-checkout").each(function () {
        var e = $(this).data("related-bundle");
        $(".inlineUpsellCheck", $(this)).prop("checked", !1),
          e !== gu_offer_events.getCurrentBundle() && "all" !== e
            ? $(this).attr("data-upsell-enabled", !1)
            : $(this).attr("data-upsell-enabled", !0);
      });
  }
  function t() {
    r.length > 0 &&
      ($.each(r, function (e, t) {
        gu_checkout.removeProduct(t, !0);
      }),
      (r = []),
      gu_payments.updateOrder(),
      gu_offer_events.updateTotalbarTotal());
  }
  function i() {
    var e = $(this).closest(".inline-upsell-checkout").data("upsell-enabled");
    if (e) {
      var t = $(this).val().split(",");
      $(this).is(":checked") === !0
        ? $.each(s, function (e, i) {
            var n = "",
              o = i[0].variants[0].product_id,
              s = i[0].variants[0].sku,
              d = i[0].variants[0].price,
              c = "",
              u = i[0].title,
              p = i[0].options[0].name,
              f = "",
              g = "",
              _ = "";
            if (~t.indexOf(o.toString())) {
              (n =
                i[0].variants.length > 1 && "variety" !== variantIndex
                  ? i[0].variants[variantIndex].id
                  : i[0].variants[0].id),
                (c =
                  i[0].images.length > 1 && "variety" !== gu_vs.data()
                    ? i[0].images[variantIndex].src
                    : i[0].images[0].src),
                gu_vs.check() === !1
                  ? (_ = u)
                  : ((f = gu_vs.data()),
                    (g = f.toLowerCase().replace(/\b[a-z]/g, function (e) {
                      return e.toUpperCase();
                    })),
                    (_ = "Color" === p ? u + " - " + g : u));
              var h = {
                  variant_id: n,
                  product_id: o,
                  bundle_name: a,
                  bundle_id: l,
                  name: _,
                  price: d,
                  qty: 1,
                  img: c,
                  sku: s,
                  tags: gu_products.getPriceInfoForProduct(o),
                  type: "inline checkout upsell",
                },
                v = gu_checkout.addProduct(h, !0);
              r.push(v);
            }
          })
        : r.length > 0 &&
          gu_checkout.cart.forEach(function (e, i) {
            ~t.indexOf(e.product_id.toString()) &&
              (gu_checkout.removeProduct(e.upi, !0),
              (r = r.filter(function (t) {
                return t !== e.upi;
              })));
          }),
        gu_payments.updateOrder(),
        gu_offer_events.updateTotalbarTotal();
    }
  }
  function n() {
    $(document).on("click", ".inlineUpsellCheck", i);
  }
  var a =
      (upsellCheckoutData.upsell_inline_info,
      upsellCheckoutData.upsell_popup_info,
      upsellCheckoutData.upsell_inline_name,
      upsellCheckoutData.upsell_popup_name),
    o = upsellCheckoutData.upsell_inline_info,
    r = (upsellCheckoutData.upsell_popup_info, []),
    s = o,
    l = $(".bundle.selected").data("slug");
  return { init: n, clearUpsellsFromCart: t, displayCheckoutUpsells: e };
})();
gu_upsell_checkout.init();
var gu_upsells = (function () {
  function e() {
    componentOffer.bundle_info.forEach(function (e) {
      e.bundle_shipping.hasOwnProperty("domestic_shipping_default") &&
        ((e.bundle_shipping.domestic_shipping = Object.assign(
          {},
          e.bundle_shipping.domestic_shipping_default
        )),
        delete e.bundle_shipping.domestic_shipping_default),
        e.bundle_shipping.hasOwnProperty("international_shipping_default") &&
          ((e.bundle_shipping.international_shipping = Object.assign(
            {},
            e.bundle_shipping.international_shipping_default
          )),
          delete e.bundle_shipping.international_shipping_default);
    }),
      offerEventData.forEach(function (e) {
        e.hasOwnProperty("upsell_seen") && delete e.upsell_seen;
      });
  }
  function t(e, t) {
    var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
      n = componentOffer.bundle_info[e].bundle_shipping,
      a = window.offerEventData;
    if (i) {
      n.hasOwnProperty("domestic_shipping_default") ||
        (n.domestic_shipping_default = Object.assign({}, n.domestic_shipping)),
        n.hasOwnProperty("international_shipping_default") ||
          (n.international_shipping_default = Object.assign(
            {},
            n.international_shipping
          ));
      var o = !0,
        r = !1,
        s = void 0;
      try {
        for (
          var l, d = c[Symbol.iterator]();
          !(o = (l = d.next()).done);
          o = !0
        ) {
          var p = l.value;
          p[0].upsell_slug === t &&
            (p[0].free_domestic_shipping === !0 && (y = !0),
            p[0].free_international_shipping === !0 && (b = !0));
        }
      } catch (f) {
        (r = !0), (s = f);
      } finally {
        try {
          !o && d["return"] && d["return"]();
        } finally {
          if (r) throw s;
        }
      }
      var g = !0,
        _ = !1,
        h = void 0;
      try {
        for (
          var v, m = u[Symbol.iterator]();
          !(g = (v = m.next()).done);
          g = !0
        ) {
          var k = v.value;
          k[0].upsell_slug === t &&
            (k[0].free_domestic_shipping === !0 && (y = !0),
            k[0].free_international_shipping === !0 && (b = !0));
        }
      } catch (f) {
        (_ = !0), (h = f);
      } finally {
        try {
          !g && m["return"] && m["return"]();
        } finally {
          if (_) throw h;
        }
      }
      if (y) {
        (n.domestic_shipping.custom_default_rate_name = "Free Shipping!"),
          (n.domestic_shipping.default_domestic_shipping_rate = "0.00"),
          (n.domestic_shipping.default_expedited_rate = "0.00");
        var $ = !0,
          w = !1,
          x = void 0;
        try {
          for (
            var C, S = a[Symbol.iterator]();
            !($ = (C = S.next()).done);
            $ = !0
          ) {
            var E = C.value;
            E.upsell_name === t && (E.triggerFreeDomesticShipping = !0);
          }
        } catch (f) {
          (w = !0), (x = f);
        } finally {
          try {
            !$ && S["return"] && S["return"]();
          } finally {
            if (w) throw x;
          }
        }
      }
      if (b) {
        (n.international_shipping.custom_default_intl_rate_name =
          "Free International Shipping!"),
          (n.international_shipping.default_intl_shipping_rate = "0.00"),
          (n.international_shipping.default_international_expedited_rate =
            "0.00");
        var q = !0,
          D = !1,
          I = void 0;
        try {
          for (
            var O, P = a[Symbol.iterator]();
            !(q = (O = P.next()).done);
            q = !0
          ) {
            var F = O.value;
            F.upsell_name === t && (F.triggerFreeIntlShipping = !0);
          }
        } catch (f) {
          (D = !0), (I = f);
        } finally {
          try {
            !q && P["return"] && P["return"]();
          } finally {
            if (D) throw I;
          }
        }
      }
    } else {
      n.hasOwnProperty("domestic_shipping_default") &&
        ((n.domestic_shipping = Object.assign({}, n.domestic_shipping_default)),
        delete n.domestic_shipping_default),
        n.hasOwnProperty("international_shipping_default") &&
          ((n.international_shipping = Object.assign(
            {},
            n.international_shipping_default
          )),
          delete n.international_shipping_default);
      var L = !0,
        T = !1,
        M = void 0;
      try {
        for (
          var R, z = a[Symbol.iterator]();
          !(L = (R = z.next()).done);
          L = !0
        ) {
          var A = R.value;
          A.hasOwnProperty("triggerFreeDomesticShipping") &&
            delete A.triggerFreeDomesticShipping,
            A.hasOwnProperty("triggerFreeIntlShipping") &&
              delete A.triggerFreeIntlShipping;
        }
      } catch (f) {
        (T = !0), (M = f);
      } finally {
        try {
          !L && z["return"] && z["return"]();
        } finally {
          if (T) throw M;
        }
      }
    }
  }
  function i(e) {
    var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
      n = $("section#variant-selector .colors .active").data("index"),
      a = void 0,
      o = void 0;
    a = i ? c : u;
    var r = !0,
      s = !1,
      l = void 0;
    try {
      for (
        var p, _ = a[Symbol.iterator]();
        !(r = (p = _.next()).done);
        r = !0
      ) {
        var h = p.value;
        h[0].upsell_slug === e && (o = h);
      }
    } catch (v) {
      (s = !0), (l = v);
    } finally {
      try {
        !r && _["return"] && _["return"]();
      } finally {
        if (s) throw l;
      }
    }
    var m = !0,
      y = !1,
      b = void 0;
    try {
      for (
        var k, w = offerEventData[Symbol.iterator]();
        !(m = (k = w.next()).done);
        m = !0
      ) {
        var x = k.value;
        x.upsell_name === e && (x.upsell_taken = !0);
      }
    } catch (v) {
      (y = !0), (b = v);
    } finally {
      try {
        !m && w["return"] && w["return"]();
      } finally {
        if (y) throw b;
      }
    }
    $.each(o, function (a, r) {
      var s = "",
        l = "";
      try {
        r.variants.length > 1 && "variety" !== n
          ? ((s = r.variants[n].id), (l = r.title.split("-")[0]))
          : ((s = r.variants[0].id), (l = r.title));
      } catch (c) {
        console.error("Bundle products may need to be refreshed \n\r", c);
      }
      t($(".bundle.selected").data("index") - 1, e);
      var u = r.variants[0].product_id,
        p = r.variants[0].sku,
        _ = r.variants[0].price;
      void 0 === h && (h = "");
      var h = "";
      r.images.length > 0
        ? "variety" !== gu_vs.data() && null !== gu_vs.data()
          ? $.each(r.images, function (e, t) {
              var i = "";
              0 === t.variant_ids.length
                ? ((i = r.variants[e] ? r.variants[e].product_id : ""),
                  t.product_id === i && (h = t.src))
                : ((i = r.variants[n] ? r.variants[n].image_id : ""),
                  t.id === i && (h = t.src));
            })
          : (h = r.images[0].src)
        : (h =
            "/wp-content/themes/giddyupio-prototype/images/image-placeholder.png");
      var v = r.title,
        m = r.options[0].name,
        y = "",
        b = "",
        k = "",
        w = $(
          "#" + e + '.upsell.upsell-container input[name="quantity"]'
        ).val();
      if (gu_vs.check() === !1 || null === gu_vs.data()) k = v;
      else if (
        ((y = gu_vs.data()),
        (b = y.toLowerCase().replace(/\b[a-z]/g, function (e) {
          return e.toUpperCase();
        })),
        "Color" === m && r.variants.length > 1)
      ) {
        if (((k = v), "variety" === gu_vs.data())) {
          var x = r.variants[0].title.split("-")[0];
          b = x;
        }
      } else (k = v), (b = "");
      var C = {
        variant_id: s,
        product_id: u,
        bundle_name: d,
        bundle_id: e,
        name: k,
        subtitle: b,
        price: _,
        qty: w,
        img: h,
        sku: p,
        tags: gu_products.getPriceInfoForProduct(u),
        type: "presell",
      };
      (null !== C.product_id && "" !== C.product_id) ||
        (console.log("product data came back null"),
        window._guLogger.error(
          "CODE RED: Shopify Product Error. Product ID not found in Shopify store.",
          Error("Product ID not found"),
          {
            shopifyDomain: gu_shopify_domain,
            severity: "critical",
            bundle_id: bundle_slug,
            variants: r.bundle_variant_info.variants[0],
          }
        )),
        (null !== C.variant_id && "" !== C.variant_id) ||
          (console.log("variant data came back null"),
          window._guLogger.error(
            "CODE RED: Shopify Variant Error. ShopifyData Product ID not found in Shopify store.",
            Error("Product ID not found"),
            {
              shopifyDomain: gu_shopify_domain,
              severity: "critical",
              bundle_id: bundle_slug,
              variants: r.bundle_variant_info.variants[0],
            }
          ));
      var S = $("#" + e + ".upsell .qtybox input"),
        E = { variant_id: s, product_id: u, price: _, qty: w };
      (null !== E.product_id && "" !== E.product_id) ||
        (console.log("product data came back null"),
        window._guLogger.error(
          "CODE RED: Shopify Upsell Product Error. Product ID not found in Shopify store.",
          Error("Product ID not found"),
          {
            shopifyDomain: gu_shopify_domain,
            severity: "critical",
            bundle_id: bundle_slug,
            variants: r.bundle_variant_info.variants[0],
          }
        )),
        (null !== E.variant_id && "" !== E.variant_id) ||
          (console.log("variant data came back null"),
          window._guLogger.error(
            "CODE RED: Shopify Upsell Variant Error. ShopifyData Product ID not found in Shopify store.",
            Error("Product ID not found"),
            {
              shopifyDomain: gu_shopify_domain,
              severity: "critical",
              bundle_id: bundle_slug,
              variants: r.bundle_variant_info.variants[0],
            }
          ));
      var q = gu_checkout.addProduct(C);
      (o[0].upi = q),
        i ? f.push(q) : g.push(q),
        gu_checkout.updateProduct(q, C),
        (C.qty = S.val());
    });
  }
  function n(e) {
    var t = void 0;
    if ($(".upsell").length > 0) {
      var i = !0,
        n = !1,
        a = void 0;
      try {
        for (
          var o, r = c[Symbol.iterator]();
          !(i = (o = r.next()).done);
          i = !0
        ) {
          var s = o.value;
          s[0].upsell_slug === e && (t = s);
        }
      } catch (l) {
        (n = !0), (a = l);
      } finally {
        try {
          !i && r["return"] && r["return"]();
        } finally {
          if (n) throw a;
        }
      }
    }
    if (f.length > 0) {
      var d = t[0].upi;
      f.indexOf(d) !== -1 && gu_checkout.removeProduct(d, !1);
    }
    if (g.length > 0) {
      var u = t[0].upi;
      g.indexOf(u) !== -1 && gu_checkout.removeProduct(u, !1);
    }
    gu_offer_events.updateTotalbarTotal();
  }
  function a() {
    $(".upsell").css("height", "auto"),
      $(".upsell").hide(),
      gu_upsell_checkout.clearUpsellsFromCart(),
      g.length > 0 &&
        ($.each(g, function (e, t) {
          gu_checkout.removeProduct(t, !0);
        }),
        (g = [])),
      f.length > 0 &&
        ($.each(f, function (e, t) {
          gu_checkout.removeProduct(t, !0);
        }),
        (f = [])),
      gu_offer_events.upsellDisplay.clear(),
      gu_offer_events.upsellStatusReset(),
      gu_offer_events.updateTotalbarTotal();
  }
  function o(e) {
    var t = $("#" + e + " .button-container"),
      i = t.find(".original-button-text").text(),
      n = t.find(".button.already-opened .original-button");
    t.find(".button").show(),
      n.text(i),
      $('div[class~="upsell-popup"]').modal("hide"),
      n.length &&
        (n.removeClass(".already-opened"),
        n.find(".original-button").text(i),
        t.parent().find(".remove-upsell").hide(),
        t.parent().find(".cancel-upsell").show()),
      gu_events.fireAndLogEvent(gu_events.eventList.upsellReject),
      h.hide(),
      $("#" + e + " .button-container .button").show();
  }
  function r(e, t) {
    var i = $("#" + e + ' input[name="quantity"]'),
      a = i.val();
    "add" === t ? a++ : "sub" === t && a--,
      a > 0 && i.val(a).trigger("change"),
      0 === a && (n(e), o(e));
  }
  function s() {
    var e = $(this)
        .parent()
        .find(".button-container")
        .find(".original-button-text")
        .text(),
      t = $(this)
        .parent()
        .find(".button-container")
        .find(".button .already-opened .original-button");
    t.text(e),
      $('div[class~="upsell-popup"]').modal("hide"),
      t.length &&
        (t.removeClass(".already-opened"), t.find(".original-button").text(e));
  }
  function l() {
    _.hide(), h.hide();
    var o = $(".upsell-popup");
    $(".upsell .upsell-info").on(
      "click",
      ".button-container .button",
      function () {
        var e = $(this),
          t = e.find(".original-button"),
          n = e.closest(".bundle-extra").data("slug"),
          a = e.parent().parent().find(".remove-upsell"),
          o = e.parent().parent().find(".cancel-upsell"),
          r = e.parent().parent().find(".qtybox"),
          s = e.parent().parent().find(".qtybox.qtynew");
        e.addClass("lock-out"),
          setTimeout(function () {
            e.removeClass("lock-out");
          }, 5e3),
          (v = $("#" + n + '.upsell-container input[name="quantity"]').val()),
          (p = e.find(".original-button-text").text()),
          e.addClass("already-opened"),
          t.text(guSubstituteString("Added!")),
          e.delay(300).fadeOut("slow"),
          a.show(),
          o.hide(),
          s.length > -1 && r.hide(),
          s.hasClass("min-qty-disc")
            ? $(
                "#" + n + '.upsell.upsell-container input[name="quantity"]'
              ).val(v)
            : $(
                "#" + n + '.upsell.upsell-container input[name="quantity"]'
              ).val("1"),
          i(n),
          e.parent().parent().find(".qtybox.qtynew").length > 0
            ? r.show()
            : gu_offer_events.checkout(),
          gu_offer_events.updateTotalbarTotal(),
          gu_events.fireAndLogEvent(gu_events.eventList.yesInlineUpsell);
      }
    ),
      o.on("click", ".button-container .button", function () {
        var e = $(this);
        p = e.text();
        var t = e.closest(".bundle-extra").data("slug").toString(),
          n = u,
          a = void 0,
          o = !0,
          r = !1,
          s = void 0;
        try {
          for (
            var l, d = n[Symbol.iterator]();
            !(o = (l = d.next()).done);
            o = !0
          ) {
            var c = l.value;
            c[0].upsell_slug === t && (a = c);
          }
        } catch (f) {
          (r = !0), (s = f);
        } finally {
          try {
            !o && d["return"] && d["return"]();
          } finally {
            if (r) throw s;
          }
        }
        i(t, !1),
          offerEventStatus.upsellsRemaining > 0
            ? (gu_offer_events.updateTotalbarTotal(),
              gu_offer_events.showNextHiddenExtra())
            : gu_offer_events.checkout(),
          gu_events.fireAndLogEvent(gu_events.eventList.presellPopupAccept),
          $('div[class~="upsell-popup"]').modal("hide");
      }),
      o.on("click", ".popup-content p.cancel-upsell", function () {
        gu_events.fireAndLogEvent(gu_events.eventList.presellPopupReject);
      }),
      m.on("click", ".cancel-upsell", function (e) {
        e.preventDefault(),
          s.call(this),
          gu_events.fireAndLogEvent(gu_events.eventList.noInlineUpsell),
          gu_offer_events.checkout();
      }),
      m.on("click", ".upsell .upsell-info .remove-upsell", function () {
        var e = $(this),
          i = e.parent().find(".button-container"),
          a = e.parent().find(".cancel-upsell"),
          o = i.find(".original-button-text").text(),
          r = e.closest(".bundle-extra").data("slug"),
          s = e.parent().parent().find(".qtybox");
        i.find(".button").show(),
          i.find(".already-opened").find(".original-button").text(o),
          e.hide(),
          a.show(),
          gu_events.fireAndLogEvent(gu_events.eventList.removeInlineUpsell),
          $(".already-opened").length > 0 &&
            ($(".min-qty-disc").length > 0
              ? $(
                  "#" + r + ' .upsell.upsell-container input[name="quantity"]'
                ).val(v)
              : $(
                  "#" + r + ' .upsell.upsell-container input[name="quantity"]'
                ).val("1")),
          $("#" + r + " .qtybox .qtynew").length > -1 && s.hide(),
          n(r);
        var l = !0,
          d = !1,
          c = void 0;
        try {
          for (
            var u, p = offerEventData[Symbol.iterator]();
            !(l = (u = p.next()).done);
            l = !0
          ) {
            var f = u.value;
            f.upsell_name === r && delete f.upsell_taken;
          }
        } catch (g) {
          (d = !0), (c = g);
        } finally {
          try {
            !l && p["return"] && p["return"]();
          } finally {
            if (d) throw c;
          }
        }
        t($(".bundle.selected").data("index") - 1, r, !1),
          $("#checkout").is(":visible") && gu_checkout.startCheckout(!0);
      }),
      $('div[class~="upsell-popup"] .modal-content .close').click(function () {
        gu_offer_events.checkout(), $(".upsell-popup").modal("hide");
      }),
      $(document)
        .on(
          "click",
          ".upsell .qtybox .plus, .upsell .qtybox .minus",
          function (e) {
            e.preventDefault();
            var t = $(this).closest(".bundle-extra").data("slug");
            $(this).hasClass("plus")
              ? r(t, "add")
              : $(this).hasClass("minus") && r(t, "sub");
          }
        )
        .on("change", '.upsell .qtybox input[name="quantity"]', function (e) {
          var t = $(this).closest(".bundle-extra").data("slug"),
            i = $(this).val(),
            n = void 0,
            a = !0,
            o = !1,
            r = void 0;
          try {
            for (
              var s, l = c[Symbol.iterator]();
              !(a = (s = l.next()).done);
              a = !0
            ) {
              var d = s.value;
              d[0].upsell_slug === t && (n = d);
            }
          } catch (u) {
            (o = !0), (r = u);
          } finally {
            try {
              !a && l["return"] && l["return"]();
            } finally {
              if (o) throw r;
            }
          }
          var p = {
            variant_id: n[0].variants[0].id,
            product_id: n[0].variants[0].product_id,
            price: n[0].variants[0].price,
            qty: i,
          };
          gu_checkout.updateProduct(n[0].upi, p),
            gu_offer_events.updateTotalbarTotal();
        }),
      $(document).on("click", "#variant-selector .colors", function (t) {
        $(".remove-upsell").click(),
          a(),
          e(),
          g.length > 0 &&
            ($.each(g, function (e, t) {
              gu_checkout.removeProduct(t, !0);
            }),
            (g = [])),
          gu_offer_events.upsellStatusReset(),
          gu_offer_events.updateTotalbarTotal();
      }),
      $(".bundle").on("click", function (t) {
        $("#checkout").hide();
        var i = gu_offer_events.upsellDisplay.isShown(),
          n = 0 != $(".bundle-qty-selector", $(this)).data("start-qty"),
          o = "fixed" === $(this).data("bundle-qty"),
          r = $(t.target).closest("[data-quantify]").length;
        i && !r && ($(".remove-upsell").click(), a(), e()),
          gu_vs.check() && (o || n) && gu_offer_events.startExtras(),
          gu_offer_events.updateTotalbarTotal();
      });
  }
  var d = upsellData.upsell_inline_name,
    c = (upsellData.upsell_popup_name, upsellData.upsell_inline_info),
    u = upsellData.upsell_popup_info,
    p = void 0,
    f = [],
    g = [],
    _ = $(".upsell .upsell-info .remove-upsell"),
    h = $(".upsell .upsell-info .qtybox"),
    v = void 0,
    m = $(".offer-section, .multi-offer-upsell-section"),
    y = !1,
    b = !1;
  return { init: l };
})();
document.addEventListener("DOMContentLoaded", function () {
  gu_upsells.init();
});
var _slicedToArray = (function () {
    function e(e, t) {
      var i = [],
        n = !0,
        a = !1,
        o = void 0;
      try {
        for (
          var r, s = e[Symbol.iterator]();
          !(n = (r = s.next()).done) && (i.push(r.value), !t || i.length !== t);
          n = !0
        );
      } catch (l) {
        (a = !0), (o = l);
      } finally {
        try {
          !n && s["return"] && s["return"]();
        } finally {
          if (a) throw o;
        }
      }
      return i;
    }
    return function (t, i) {
      if (Array.isArray(t)) return t;
      if (Symbol.iterator in Object(t)) return e(t, i);
      throw new TypeError(
        "Invalid attempt to destructure non-iterable instance"
      );
    };
  })(),
  gu_vs = (function () {
    function ViewModel() {
      var e = this;
      (e.data =
        void 0 !== multi_bundleData
          ? multi_bundleData
          : componentOffer.bundle_info),
        void 0 !== e.data[0] &&
          ((e.common_data = e.data[0].bundle_object[0]),
          (e.discount_bundles =
            "undefined" != typeof discount_bundle_object
              ? discount_bundle_object
              : []),
          (e.addon_bundles =
            "undefined" != typeof addon_bundle_object
              ? addon_bundle_object
              : []),
          (e.bundled_product_ids = []),
          (e.module = "#variant-selector"),
          (e.display = {
            initialized: !1,
            ready: !1,
            title: e.common_data.bundle_variant_info.title,
            country: gu_country,
          }),
          (e.ad_hoc_logic = { PSM: "ThePhotoStick Checkout" }),
          (e.offer = {
            vendor: e.common_data.bundle_variant_info.vendor,
            allow_multiple_bundles: !1,
          }),
          (e.variants = {
            title: e.common_data.bundle_variant_info.title,
            type: e.common_data.bundle_variant_info.options[0].name.toLowerCase(),
            apply_to_all: !0,
            addon: !1,
            options: e.common_data.bundle_variant_info.variants,
            images: e.common_data.bundle_variant_info.images,
            tags: e.common_data.bundle_variant_info.tags,
            excluded: window.site_vars.excluded_variants.split(","),
            variety_pack: ["color"],
            registered_types: ["color", "size", "upgrade"],
          }),
          (e.variants.count = e.variants.options.length),
          (e.sync = function () {
            (e.offer.elements = []),
              (e.offer.selected = []),
              (e.offer.selected_bundles = []),
              "upgrade" === e.variants.type &&
                ((e.offer.allow_multiple_bundles = !0),
                e.data.sort(function (e, t) {
                  return e.bundle_price > t.bundle_price ? -1 : 1;
                })),
              e.data.forEach(function (t, i) {
                if (void 0 !== e.data[i]) {
                  if (
                    ((t.bundle_element = $(
                      '[data-slug="' + t.bundle_slug + '"'
                    )),
                    (t.bundle_price =
                      t.bundle_object[0].bundle_variant_info.variants[0].price),
                    t.selected_bundle)
                  ) {
                    var n = parseInt($(".qty", $(t.bundle_element)).text());
                    (n = isNaN(n) ? 1 : 0 === n ? 1 : n),
                      e.offer.selected.push(n),
                      e.offer.selected_bundles.push(t.bundle_object),
                      (t.selected_qty = n);
                  } else e.offer.selected.push(0), (t.selected_qty = 0);
                  t.bundle_object.forEach(function (t) {
                    ~e.bundled_product_ids.indexOf(t.bundle_variant_info.id) ||
                      e.bundled_product_ids.push(t.bundle_variant_info.id);
                  });
                }
              }),
              (e.variants.elements = []),
              (e.variants.selected = {});
            var t = $("[data-variant-selected]").attr("data-variant-selected");
            $("[data-variant-index]", $(e.module)).each(function (i) {
              e.variants.elements.push($(this)),
                i == t
                  ? ($(this).addClass("active"),
                    $('input[type="checkbox"]', $(this)).prop("checked", !0),
                    (e.variants.selected.index = t),
                    (e.variants.selected.title = e.variants.options[t].title))
                  : ($(this).removeClass("active"),
                    $('input[type="checkbox"]', $(this)).prop("checked", !1));
            }),
              e.addon_bundles.length &&
                ("size" === e.variants.type
                  ? (e.addon_bundles.forEach(function (t, i) {
                      ~e.bundled_product_ids.indexOf(parseInt(t.pid))
                        ? (e.variants.addon = !0)
                        : e.addon_bundles.splice(i, 1);
                    }),
                    0 !== e.addon_bundles.length ||
                      e.variants.addon ||
                      console.error(
                        "* Variant Addons: product IDs & variant PIDs have no matching bundles"
                      ))
                  : console.error(
                      "* Variant Addons: " +
                        e.variants.type +
                        " variant addons are disabled. Only size variants are supported."
                    )),
              "size" === e.variants.type && (e.variants.apply_to_all = !1),
              e.display.initialized || e.curateOptions();
          }),
          (e.isReady = function (t) {
            return void 0 === t
              ? e.display.ready
              : (t
                  ? e.display.ready ||
                    (e.enableAdHocLogic("PSM") && "upgrade" === e.variants.type
                      ? (gu_offer_events.showTotalbar("next"),
                        $(e.module).addClass("pending"))
                      : gu_offer_events.showTotalbar(),
                    ~e.variants.registered_types.indexOf(e.variants.type)
                      ? $(e.module).attr("data-variant-type", e.variants.type)
                      : $(e.module).attr("data-variant-type", "generic"),
                    $(document)
                      .on("click", "[data-variant-index]", optionChooser)
                      .on("click", "[data-enable-addon]", enableAddon)
                      .on(
                        "click",
                        "[data-variant-index-remote] input",
                        remoteSelector
                      )
                      .on("click", "#total-bar .next", revealVariants),
                    (e.display.ready = !0),
                    e.display.initialized ||
                      (e.doPageScripts(), (e.display.initialized = !0)))
                  : ($(e.module).attr("data-variant-type", ""),
                    $(document)
                      .off("click", "[data-variant-index]", optionChooser)
                      .off("click", "[data-enable-addon]", enableAddon)
                      .off(
                        "click",
                        "[data-variant-index-remote] input",
                        remoteSelector
                      )
                      .off("click", "#total-bar .next", revealVariants),
                    (e.display.ready = !1)),
                void e.adjustView("top"));
          }),
          (e.buildDisplay = function () {
            return "upgrade" !== e.variants.type || !viewModel.isReady();
          }),
          (e.isAnyOfferSelected = function () {
            var t = e.offer.selected.reduce(function (e, t) {
              return e + t;
            }, 0);
            return 0 != t;
          }),
          (e.curateOptions = function () {
            var t = [];
            e.variants.options.forEach(function (i, n) {
              ~e.variants.excluded.indexOf(i.id.toString()) || t.push(i);
            }),
              ~e.variants.variety_pack.indexOf(e.variants.type) &&
                "variety" !== e.variants.options[0].id &&
                t.unshift({ id: "variety", title: "variety" }),
              (e.variants.options = t),
              (e.variants.count = t.length);
          }),
          (e.isVariantType = function () {
            var t =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : null;
            return null != t ? e.variants.type == t : e.variants.type;
          }),
          (e.selectedVariant = function (t) {
            var i = t.bundle_variant_info.variants[e.variants.selected.index],
              n = i.image_id,
              a = "";
            t.bundle_variant_info.images.forEach(function (e) {
              e.id == n && void 0 !== e.src && (a = e.src);
            }),
              "" !== a
                ? (i.variant_image = a)
                : console.log(
                    "%c MISSING PRODUCT IMAGE ",
                    "background: #240100; color: #ef8783; display: block; padding: 10px 5px; border-top: 1px solid #540a04; border-bottom: 1px solid #540a04; "
                  );
            var o = t.bundle_variant_info.title;
            return (
              void 0 === o && (o = e.variants.title), (i.variant_name = o), i
            );
          }),
          (e.getVariantImages = function (t) {
            var i = "";
            return (
              e.variants.images.forEach(function (e) {
                ~e.variant_ids.indexOf(t) && void 0 !== e.src && (i = e.src);
              }),
              "" !== i && i
            );
          }),
          (e.combineDiscountBundlesWith = function (t) {
            return e.addon_bundles.length > 0
              ? t.concat(e.addon_bundles)
              : t.concat(e.discount_bundles);
          }),
          (e.enableAdHocLogic = function (t) {
            return (
              e.ad_hoc_logic[t].toLowerCase() === e.offer.vendor.toLowerCase()
            );
          }),
          (e.doTranslation = function () {
            $("[data-translate]").each(function (e) {
              var t = $(this).data("translate"),
                i = guSubstituteString(t);
              $(this).html(i);
            });
          }),
          (e.doPageScripts = function () {
            variantPageScripts();
          }),
          (e.resetPageDisplay = function () {
            e.isReady(!1),
              $(
                '#main-wrapper > div[style~="display:"], #footer[style~="display:"]'
              ).each(function () {
                $(this).removeAttr("style");
              });
          }),
          (e.adjustView = function () {
            var t =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : top;
            setTimeout(function () {
              var i = "scrollBehavior" in document.documentElement.style;
              if (i)
                switch (t) {
                  case "top":
                  default:
                    document
                      .querySelector(e.module)
                      .scrollIntoView({
                        behavior: "smooth",
                        block: "start",
                        inline: "nearest",
                      });
                    break;
                  case "center":
                    document
                      .querySelector(e.module)
                      .scrollIntoView({
                        behavior: "smooth",
                        block: "center",
                        inline: "nearest",
                      });
                    break;
                  case "bottom":
                    document
                      .querySelector(e.module)
                      .scrollIntoView({
                        behavior: "smooth",
                        block: "end",
                        inline: "nearest",
                      });
                }
              else {
                var n = $(e.module).offset().top,
                  a = $(e.module)[0].offsetHeight,
                  o = a > window.innerHeight ? a - window.innerHeight : 0,
                  r = 500;
                "bottom" === t && ((n += o), (r = 200)),
                  $("html, body").stop().animate({ scrollTop: n }, r);
              }
            }, 300);
          }),
          (e.resetEvents = function () {}));
    }
    function CartController() {
      var e = this;
      (e.products = []),
        (e.addItem = function (t) {
          var i =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : "";
          if (t.product_id && t.variant_id && t.qty > 0) {
            var a = 0,
              o = "";
            gu_checkout.cart.forEach(function (e, n) {
              i
                ? t.product_id === e.product_id &&
                  t.variant_id === e.variant_id &&
                  ((a = t.qty + e.qty), (o = e.upi))
                : t.product_id === e.product_id && ((a = t.qty), (o = e.upi));
            });
            try {
              if (0 == a) {
                var r = gu_checkout.addProduct(t);
                e.products.push(r);
              } else (t.qty = a), gu_checkout.updateProduct(o, t);
            } catch (s) {
              console.error("Failure to add or update cart \r\n", s);
            }
            if ((e.updateTotal(), "log" == n)) {
              var l = [],
                d = !0,
                c = !1,
                u = void 0;
              try {
                for (
                  var p, f = Object.entries(t)[Symbol.iterator]();
                  !(d = (p = f.next()).done);
                  d = !0
                ) {
                  var g = _slicedToArray(p.value, 2),
                    _ = g[0],
                    h = g[1],
                    v = { key: _, value: h };
                  l.push(v);
                }
              } catch (s) {
                (c = !0), (u = s);
              } finally {
                try {
                  !d && f["return"] && f["return"]();
                } finally {
                  if (c) throw u;
                }
              }
              try {
                console.table(l);
              } catch (s) {
                console.info(l);
              }
              console.log(
                "* Cart: " + gu_checkout.cart.length + " line item(s)",
                "\r\n",
                gu_checkout.cart
              );
            }
          }
        }),
        (e.updateItem = function (t, i) {
          var n =
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
          try {
            gu_checkout.updateProduct(t, i);
          } catch (a) {
            console.error("Failure to update upi " + t + " in cart \r\n", a);
          }
          if ((e.updateTotal(), "log" == n)) {
            var o = [],
              r = !0,
              s = !1,
              l = void 0;
            try {
              for (
                var d, c = Object.entries(i)[Symbol.iterator]();
                !(r = (d = c.next()).done);
                r = !0
              ) {
                var u = _slicedToArray(d.value, 2),
                  p = u[0],
                  f = u[1],
                  g = { key: p, value: f };
                o.push(g);
              }
            } catch (a) {
              (s = !0), (l = a);
            } finally {
              try {
                !r && c["return"] && c["return"]();
              } finally {
                if (s) throw l;
              }
            }
            try {
              console.table(o);
            } catch (a) {
              console.info(o);
            }
            console.log(
              "* Cart: " + gu_checkout.cart.length + " line item(s)",
              "\r\n",
              gu_checkout.cart
            );
          }
        }),
        (e.removeItem = function (t) {
          if ("" != t) {
            try {
              gu_checkout.removeProduct(t),
                (e.products = e.products.filter(function (e) {
                  return e != t;
                }));
            } catch (i) {
              console.error(
                "Failure to remove product " +
                  product_id +
                  " cart using upi " +
                  t +
                  " \r\n",
                i
              );
            }
            e.updateTotal();
          }
        }),
        (e.discardProduct = function (t) {
          "" != t &&
            gu_checkout.cart.forEach(function (i, n) {
              t == i.product_id && e.removeItem(i.upi);
            }),
            e.updateTotal();
        }),
        (e.emptyCart = function () {
          e.products.forEach(function (e) {
            gu_checkout.removeProduct(e);
          }),
            (e.products = []);
        }),
        (e.updateTotal = function () {
          gu_offer_events.updateTotalbarTotal();
        }),
        (e.thisProductQty = function (e) {
          var t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "",
            i = 0;
          return (
            "" != e &&
              gu_checkout.cart.forEach(function (n, a) {
                e == n.product_id &&
                  ("" === t ? (i += n.qty) : t == n.variant_id && (i += n.qty));
              }),
            i
          );
        });
    }
    function optionBuilder() {
      if (viewModel.buildDisplay()) {
        theCart.emptyCart();
        var e = {
          headline: viewModel.variants.title,
          variants: [],
          apply_to_all: viewModel.variants.apply_to_all,
        };
        if (viewModel.variants.apply_to_all)
          viewModel.variants.options.forEach(function (t, n) {
            (t.display_index = n),
              (t.display_type = viewModel.variants.type),
              (t.display_title = t.title.replace(/-/g, " ")),
              (t.display_image = viewModel.getVariantImages(t.id)),
              (t.display_shipping_info = ""),
              (t.display_pricing_info = "");
            var a = "";
            switch (t.display_type) {
              case "color":
                break;
              case "upgrade":
                t.display_visually_hidden = 0 === n;
                break;
              default:
                var o = "";
                if ("us" === viewModel.display.country) {
                  var r = 0,
                    s = t.title.split("_");
                  for (i = 0; i < s.length && r < 3; i++)
                    (o += 2 == s[i].length ? s[i] : s[i].substring(0, 1)),
                      (r = o.length);
                } else o = guSubstituteString(t.title.substring(0, 1));
                (a += '<rect width="100%" height="100%"/>'),
                  (a +=
                    '<text x="50%" y="50%" dy="0.35em" text-anchor="middle">' +
                    o +
                    "</text>");
            }
            if (viewModel.enableAdHocLogic("PSM")) {
              if (0 !== n) {
                if ($(viewModel.module).attr("data-override-starting-price")) {
                  var l = $(viewModel.module)
                    .attr("data-override-starting-price")
                    .split(",");
                  (t.display_upgrade_base_price = l[n - 1]),
                    console.log(
                      "Variant pricing message starts at",
                      l[n - 1],
                      "for variant",
                      n
                    );
                } else
                  t.display_upgrade_base_price = Number(
                    t.price - viewModel.variants.options[0].price
                  ).toFixed(0);
                t.display_pricing_info =
                  '+<span data-variant-dynamic-pricing="' +
                  t.display_upgrade_base_price +
                  '">' +
                  guDisplayCurrency(Big(t.display_upgrade_base_price)) +
                  "</span> " +
                  guSubstituteString("per PhotoStick");
              }
              1 === n &&
                (t.display_featured_msg = guSubstituteString("Most Popular")),
                "us" === viewModel.display.country &&
                  (t.display_shipping_info =
                    "<span>PLUS FREE USA Shipping</span> <span>($7.99 Value!)</span>");
            }
            (t.display_selector = a),
              (t.display_title = guSubstituteString(t.display_title)),
              e.variants.push(t);
          });
        else {
          e.addon = !1;
          var t = 1,
            n = viewModel.offer.selected_bundles[0].length,
            a = viewModel.combineDiscountBundlesWith(
              viewModel.offer.selected_bundles[0]
            );
          a.forEach(function (i, a) {
            for (var o = i.bundle_variant_info, r = {}, s = 0; s < i.qty; s++) {
              if (
                ((r.title = guSubstituteString(viewModel.display.title)),
                (r.product = o.title),
                (r.choices = o.variants),
                (r.enabled = !0),
                a >= n)
              ) {
                if (!(t > 0)) return;
                (e.addon = !0),
                  (e.discount_percent = i.discount),
                  (r.enabled = !1),
                  (r.discount_percent = i.discount),
                  (r.discount_price = guSubstituteString("$$OnlyPrice").replace(
                    "$$TP",
                    guDisplayCurrency(Big(o.variants[0].price))
                  )),
                  (r.retail_price = guSubstituteString("$$Retail").replace(
                    "$$RP",
                    guDisplayCurrency(Big(i.rp))
                  )),
                  (r.addon_text_lead = guSubstituteString("Special Offer!")),
                  (r.addon_text_copy = guSubstituteString(
                    "One More for " + i.discount + "% OFF!"
                  )),
                  (r.addon_text_discount =
                    "en" === window.gu_language
                      ? '<div class="text-lockup"><span>' +
                        i.discount +
                        "</span><span>%</span><span>Off</span></div>"
                      : guSubstituteString(i.discount + "% Off")),
                  (r.addon_row_label = guSubstituteString(
                    i.discount + "% Off"
                  )),
                  resetAddon(),
                  t--;
              }
              e.variants.push(r);
            }
          });
        }
        var o = wp.template("product-variants-template");
        $(".content", $(viewModel.module)).html(o(e)),
          viewModel.isReady(!0),
          optionChooser();
      } else optionToCart();
    }
    function optionChooser(e) {
      if ((viewModel.resetEvents(), viewModel.variants.apply_to_all)) {
        var t = void 0 !== e ? e.currentTarget : $('[data-variant-index="0"]'),
          i = $(t).data("variant-index");
        i != viewModel.variants.selected.index
          ? $(viewModel.module).attr("data-variant-selected", i)
          : viewModel.enableAdHocLogic("PSM") &&
            $(viewModel.module).attr("data-variant-selected", "0");
      }
      optionToCart();
    }
    function optionToCart() {
      viewModel.sync(),
        theCart.emptyCart(),
        viewModel.data.forEach(function (e, t) {
          var i = $(e.bundle_element).attr("data-bundle-qty"),
            n = e.bundle_object[0].bundle_variant_info.id,
            a = [];
          e.bundle_object.forEach(function (e) {
            var t = $.extend(!0, {}, e),
              i = a.find(function (e, i) {
                if (e.bundle_variant_info.id === t.bundle_variant_info.id)
                  return (
                    (a[i].qty = (
                      parseInt(a[i].qty) + parseInt(t.qty)
                    ).toString()),
                    !0
                  );
              });
            void 0 === i && a.push(t);
          });
          var o = viewModel.combineDiscountBundlesWith(a);
          o.forEach(function (t, a) {
            if (viewModel.variants.apply_to_all) {
              var r = parseInt(e.selected_qty);
              if (r > 0) {
                var s = viewModel.selectedVariant(t),
                  l = t.discount > 0;
                if (~i.indexOf("conditional")) {
                  var d = parseInt(i.split("-")[1]);
                  if (viewModel.offer.allow_multiple_bundles)
                    if (theCart.products.length < d) {
                      if (l) return void theCart.discardProduct(s.product_id);
                      r = d;
                    } else {
                      if (!l) return void theCart.discardProduct(s.product_id);
                      if (n != t.pid) return;
                      r -= theCart.thisProductQty(n);
                    }
                  else if (r > d) {
                    if (o.length > 1)
                      if (l) {
                        if (n != t.pid) return;
                        r -= d;
                      } else r = d;
                  } else if (l)
                    return void theCart.discardProduct(s.product_id);
                }
                theCart.addItem({
                  product_id: s.product_id,
                  variant_id: s.id,
                  name: s.variant_name || t.bundle_variant_info.title,
                  subtitle: s.title,
                  price: s.price,
                  qty: r,
                  weight: s.weight + s.weight_unit,
                  img: s.variant_image,
                  sku: null === s.sku ? "" : s.sku,
                  bundle_name: e.bundle_slug,
                  bundle_id: e.bundle_slug,
                  type: "bundle",
                });
              } else
                theCart.discardProduct(n),
                  viewModel.isAnyOfferSelected() ||
                    (theCart.emptyCart(), viewModel.resetPageDisplay());
            } else {
              var c = parseInt(e.selected_qty);
              if (c > 0) {
                var u = $(
                  '.option[data-product-id="' +
                    t.bundle_variant_info.id +
                    '"][data-variant-enabled="true"] input[type="radio"]'
                );
                $(u, $(viewModel.module)).each(function () {
                  if ($(this).is(":checked")) {
                    var i = {};
                    (i.title = $(this).data("title")),
                      (i.id = parseInt($(this).val())),
                      (i.product_iD = parseInt($(this).data("product-id")));
                    var n = {};
                    t.bundle_variant_info.variants.forEach(function (e) {
                      if (i.id === e.id) return (n = e), !1;
                    }),
                      void 0 !== n.id &&
                        void 0 === n.variant_image &&
                        (t.bundle_variant_info.images.forEach(function (e) {
                          ~e.variant_ids.indexOf(n.id) &&
                            (n.variant_image = e.src);
                        }),
                        (void 0 !== n.variant_image &&
                          "" !== n.variant_image) ||
                          ("" !== t.bundle_variant_info.images[0].src
                            ? (n.variant_image =
                                t.bundle_variant_info.images[0].src)
                            : console.log(
                                "%c MISSING PRODUCT IMAGE ",
                                "background: #240100; color: #ef8783; display: block; padding: 10px 5px; border-top: 1px solid #540a04; border-bottom: 1px solid #540a04; "
                              ))),
                      theCart.addItem(
                        {
                          product_id: n.product_id,
                          variant_id: n.id,
                          name: n.variant_name || t.bundle_variant_info.title,
                          subtitle: n.title,
                          price: n.price,
                          qty: c,
                          weight: n.weight + n.weight_unit,
                          img: n.variant_image,
                          sku: null === n.sku ? "" : n.sku,
                          bundle_name: e.bundle_slug,
                          bundle_id: e.bundle_slug,
                          type: "bundle",
                        },
                        !0
                      );
                  }
                });
              }
            }
          });
        });
    }
    function variantPageScripts() {
      viewModel.enableAdHocLogic("PSM") &&
        $(document).on("change", ".bundle-qty-selector .qty", function (e) {
          var t = [];
          $(".bundle .qty").each(function () {
            t.push(parseInt($(this).text()));
          });
          var i = t.reduce(function (e, t) {
            return e + t;
          }, 0);
          $("[data-variant-dynamic-pricing]").each(function () {
            if (i > 1) {
              var e = parseInt($(this).attr("data-variant-dynamic-pricing")),
                t = viewModel.discount_bundles[0].discount / 100,
                n = e - e * t,
                a = ((e + n * (i - 1)) / i).toFixed(2);
              $(this).html(guDisplayCurrency(Big(a)));
            } else {
              var o = parseInt($(this).attr("data-variant-dynamic-pricing"));
              $(this).html(guDisplayCurrency(Big(o)));
            }
          });
        });
    }
    function variantShippingRates(e) {
      if (viewModel.enableAdHocLogic("PSM")) {
        var t = parseInt(viewModel.variants.selected.index) >= 1;
        t
          ? (void 0 === e.bundled_domestic_shipping &&
              (e.bundled_domestic_shipping = $.extend(
                !0,
                {},
                e.domestic_shipping
              )),
            (e.domestic_shipping.custom_default_rate_name =
              "Free USA Shipping!"),
            (e.domestic_shipping.default_domestic_shipping_rate = "0.00"),
            (e.domestic_shipping.default_expedited_rate = "0.00"))
          : void 0 !== e.bundled_domestic_shipping &&
            (e.domestic_shipping = e.bundled_domestic_shipping);
      }
      return e;
    }
    function enableAddon(e) {
      var t = "",
        i = !0;
      void 0 !== e &&
        (e.preventDefault(),
        (t = $(e.currentTarget).data("enable-addon")),
        0 !== $(e.currentTarget).closest(".modal").length &&
          ($("#addon-modal").off("hidden.bs.modal", dismissAddon),
          $("#addon-modal").modal("hide"))),
        "" === t
          ? (t = $("[data-variant-index]").length - 1)
          : "remove" === t.toString().toLowerCase() &&
            ((t = $("[data-variant-index]").length - 1), (i = !1)),
        $('[data-variant-index="' + t + '"]', $(viewModel.module)).attr(
          "data-variant-enabled",
          i
        ),
        optionChooser(),
        i
          ? ($(viewModel.module).addClass("addon-selected"), dismissAddon())
          : $(viewModel.module).removeClass("addon-selected"),
        viewModel.adjustView("bottom");
    }
    function displayAddon() {
      var e =
          arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
        t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      return (
        "undefined" == typeof displayAddon.active
          ? (displayAddon.active = !0)
          : null !== e && (displayAddon.active = e),
        !t &&
          !!displayAddon.active &&
          !!viewModel.variants.addon &&
          ($("#addon-modal").modal(),
          $("#addon-modal").on("hidden.bs.modal", dismissAddon),
          !0)
      );
    }
    function dismissAddon() {
      setTimeout(function () {
        displayAddon(!1), gu_offer_events.checkout();
      }, 0);
    }
    function resetAddon() {
      $(viewModel.module).removeClass("addon-selected"), displayAddon(!0, !0);
    }
    function remoteSelector(e) {
      var t = $(e.currentTarget).closest(".option-remote"),
        i = $(t).data("variant-index-remote"),
        n = $(this).val();
      $('[data-variant-index="' + i + '"] input[value="' + n + '"]').prop(
        "checked",
        !0
      );
    }
    function revealVariants(e) {
      e.preventDefault(),
        $(viewModel.module).removeClass("pending"),
        viewModel.adjustView("top"),
        gu_offer_events.showTotalbar("checkout");
    }
    function data() {
      if (viewModel.isVariantType("color")) {
        var index = $($colors + "." + $activeClass).data("index"),
          type = $($colors + "." + $activeClass).data("colortype");
        if ("variety" === type) return "variety";
        if ("mixed" === type) return "mixed";
        var _data = eval($bundleObj + "[0]." + $variantsLoc)[index],
          color = _data.title.toLowerCase();
        return ~color.indexOf("-") && (color = color.split("-")[0]), color;
      }
      return null;
    }
    function getQty() {
      var qty = 0;
      return (
        eval($bundleObj).forEach(function (e) {
          qty += parseInt(e.qty);
        }),
        qty
      );
    }
    function check() {
      return void 0 !== viewModel.variants
        ? viewModel.variants.count > 1 || (theCart.emptyCart(), !1)
        : (theCart.emptyCart(), !1);
    }
    function click(el) {
      if (!$(el).hasClass($activeClass)) {
        var index = $(el).data("index"),
          selectors = $(el).parent().children();
        if (
          (selectors.hasClass($activeClass)
            ? (selectors.removeClass($activeClass),
              $(el).addClass($activeClass),
              updateVariant(index))
            : ($(el).addClass($activeClass), addVariant(index)),
          viewModel.isVariantType("color"))
        ) {
          var color = isFinite(index)
              ? eval($variants)
                  [index].title.split("-")[0]
                  .toLowerCase()
                  .replace(/\s/g, "")
              : $varietyClass,
            qty = 0;
          eval($bundleObj).forEach(function (e) {
            qty += parseInt(e.qty);
          });
          var src = $galleryDirectory + "/" + qty + "-" + color + ".png";
          $($colorImage).attr("src", src);
        }
      }
    }
    function displayBuilder() {
      if (viewModel.isVariantType("color")) {
        viewModel.adjustView("top"),
          theCart.emptyCart(),
          "" == $($title).text() && $($title).text(viewModel.display.title),
          $(viewModel.module).addClass($colorsClass),
          $(viewModel.module).show(),
          $($colorsEl).show(),
          $($colorsWrap).empty();
        var counter = 0;
        eval($variants).forEach(function (e, t) {
          var i = e.id;
          if (null !== i) {
            if ($excludedVariants.indexOf(e.id.toString()) === -1) {
              var n = $($colorSampleHTML),
                a = e.title.split("-")[0];
              if ("mixed" === a.toLowerCase()) {
                var o = $.grep(viewModel.variants.tags, function (e) {
                    return e.indexOf("colors:") > -1;
                  }),
                  r = $.grep(o[0].split(/[:;-]/), function (e) {
                    return e.indexOf("|") > -1;
                  }),
                  s = buildGradient(r[0].split("|"));
                n.find($colorsCircle).attr("style", "background: " + s),
                  n.attr("data-colortype", "mixed");
              } else {
                var l = getHexValue(a);
                n.find($colorsCircle).css("background-color", "#" + l),
                  n.attr("data-colortype", "single");
              }
              n.find($colorsTitle).text(guSubstituteString(a)),
                n.attr("data-index", t),
                $($colorsWrap).append(n),
                counter++;
            }
          } else console.log("Not displaying variant: " + e.title + ". Shopify Product ID not found in Shopify store."), window._guLogger.error("CODE RED: Shopify Product Error. Variant ID is null.", Error("Product ID not found"), { shopifyDomain: gu_shopify_domain, variantID: i, variantTitle: e.title, severity: "critical" });
        }),
          void 0 !== getVarietyPack() &&
            getVarietyPack().length > 0 &&
            counter++,
          $($colorsWrap).attr("data-option-count", counter),
          $($colors).first().click(),
          setupVarietyPacks();
      } else
        setTimeout(function () {
          viewModel.sync(), optionBuilder();
        }, 0);
    }
    function isHex(e) {
      return /^[A-F0-9]+$/i.test(e);
    }
    function getHexValue(e) {
      if (isHex(e)) return e;
      var t = $.grep(viewModel.variants.tags, function (e) {
        return e.indexOf("colors:") > -1;
      });
      (t = t[0].split(":").pop().split(";")),
        ~e.indexOf("-") && (e = e.split("-")[0]);
      var i = $.grep(t, function (t) {
        return t.toLowerCase().indexOf(e.toLowerCase()) > -1;
      });
      return i.length
        ? i[0].split("-").pop()
        : (console.log(
            "The color " +
              e +
              " is missing a hex on it's title. Please add one in."
          ),
          "000000");
    }
    function getVarietyPack() {
      var e = $.grep(viewModel.variants.tags, function (e) {
        return 0 === e.indexOf("vp:");
      });
      return (
        e.length > 0 &&
        (e.forEach(function (t, i) {
          var n = t.replace("vp: ", "").replace("vp:", "");
          e[i] =
            0 === n.indexOf("-") ? n.split(";") : n.split("-").pop().split(";");
        }),
        (e = $.grep(e, function (e) {
          return e.length === getQty();
        })),
        e[0])
      );
    }
    function setupVarietyPacks() {
      var e = getVarietyPack();
      if (e) {
        var t = [];
        try {
          t = [].concat(_toConsumableArray(new Set(e)));
        } catch (i) {
          t = e.filter(function (e, t, i) {
            return i.indexOf(e) === t;
          });
        }
        var n = buildGradient(t),
          a = $($colorSampleHTML);
        a.find($colorsTitle).text(guSubstituteString($varietyColorName)),
          a.find($colorsCircle).attr("style", "background: " + n),
          a.attr("data-index", $varietyClass),
          a.attr("data-colortype", "variety"),
          $($colorsWrap).prepend(a),
          $($colors).first().click();
      } else
        $($colors).hasClass($varietyClass) && $(colors + " .variety").remove();
    }
    function buildGradient(e) {
      var t = (100 / e.length).toFixed(0),
        i = 0,
        n = "";
      return (
        e.forEach(function (e) {
          var a = getHexValue(e),
            o = parseInt(i) + parseInt(t),
            r = ", #" + a + " " + i + "%, #" + a + " " + o + "%";
          (n += r), (i = o);
        }),
        "linear-gradient(to right" + n + ");"
      );
    }
    function addVariant(variantIndex, productIndex) {
      eval($bundleObj).forEach(function (value, index) {
        var data = eval($bundleObj + "[" + index + "]." + $variantsLoc)[
            variantIndex
          ],
          img = "";
        value.bundle_variant_info.images.forEach(function (e) {
          e.variant_ids[0] === data.id && void 0 !== e.src && (img = e.src);
        }),
          "" === img &&
            console.log(
              "%c MISSING PRODUCT IMAGE ",
              "background: #240100; color: #ef8783; display: block; padding: 10px 5px; border-top: 1px solid #540a04; border-bottom: 1px solid #540a04; "
            );
        var name = eval($bundleObj)[index].bundle_variant_info.title;
        void 0 === name && (name = eval($label));
        var upi = gu_checkout.addProduct({
          bundle_id: eval($bundleSlug),
          bundle_name: eval($bundleSlug),
          product_id: data.product_id,
          variant_id: data.id,
          name: name,
          subtitle: data.title.split("-")[0],
          price: data.price,
          qty: value.qty,
          weight: data.weight,
          img: img,
          sku: null === data.sku ? "" : data.sku,
          type: "bundle",
        });
        theCart.products.push(upi);
      });
    }
    function updateVariant(variantIndex, productIndex) {
      if (variantIndex === $varietyClass) {
        theCart.emptyCart();
        var vp = getVarietyPack();
        eval($bundleObj).forEach(function (value, index) {
          for (
            var variants = eval($bundleObj + "[" + index + "]." + $variantsLoc),
              qty = eval($bundleObj + "[" + index + "].qty"),
              _loop = function _loop(_i2) {
                var variant = $.grep(variants, function (e) {
                    return (
                      0 ===
                      e.title.toLowerCase().replace(" ", "").indexOf(vp[0])
                    );
                  }),
                  variantIndex = 0;
                try {
                  variantIndex = variants.findIndex(function (e) {
                    return 0 === e.title.toLowerCase().indexOf(vp[0]);
                  });
                } catch (err) {
                  for (var vi = 0; vi < variants.length; ++vi)
                    if (0 === variants[vi].title.toLowerCase().indexOf(vp[0])) {
                      variantIndex = vi;
                      break;
                    }
                }
                variant = variant[0];
                var img = "no image match";
                value.bundle_variant_info.images.forEach(function (e) {
                  e.variant_ids[0] === variant.id && (img = e.src);
                });
                var name = eval($bundleObj)[index].bundle_variant_info.title;
                void 0 === name && (name = eval($label));
                var cartQty = 0,
                  cartUpi = "";
                if (
                  (gu_checkout.cart.forEach(function (e, t) {
                    variant.id === e.variant_id &&
                      ((cartQty = e.qty + 1), (cartUpi = e.upi));
                  }),
                  0 == cartQty)
                ) {
                  var upi = gu_checkout.addProduct({
                    bundle_id: eval($bundleSlug),
                    bundle_name: eval($bundleSlug),
                    product_id: variant.product_id,
                    variant_id: variant.id,
                    name: name,
                    subtitle: variant.title.split("-")[0],
                    price: variant.price,
                    qty: 1,
                    weight: variant.weight,
                    img: img,
                    sku: null === variant.sku ? "" : variant.sku,
                    type: "bundle",
                  });
                  theCart.products.push(upi);
                } else
                  gu_checkout.updateProduct(cartUpi, {
                    bundle_id: eval($bundleSlug),
                    bundle_name: eval($bundleSlug),
                    product_id: variant.product_id,
                    variant_id: variant.id,
                    name: name,
                    subtitle: variant.title.split("-")[0],
                    price: variant.price,
                    qty: cartQty,
                    weight: variant.weight,
                    img: img,
                    sku: null === variant.sku ? "" : variant.sku,
                    type: "bundle",
                  });
                vp.splice(0, 1);
              },
              _i2 = 0;
            _i2 < qty;
            _i2++
          )
            _loop(_i2);
        });
      } else
        theCart.products.forEach(function (value, index) {
          if (void 0 !== eval($bundleObj + "[" + index + "]")) {
            var _data2 = eval($bundleObj + "[" + index + "]." + $variantsLoc)[
                variantIndex
              ],
              images = eval(
                $bundleObj + "[" + index + "].bundle_variant_info.images"
              ),
              _img = "";
            images.forEach(function (e) {
              e.variant_ids[0] === _data2.id && (_img = e.src);
            }),
              "" === _img &&
                console.log(
                  "%c MISSING PRODUCT IMAGE ",
                  "background: #240100; color: #ef8783; display: block; padding: 10px 5px; border-top: 1px solid #540a04; border-bottom: 1px solid #540a04; "
                );
            var _name = eval($bundleObj)[index].bundle_variant_info.title;
            void 0 === _name && (_name = eval($label)),
              gu_checkout.updateProduct(value, {
                bundle_id: eval($bundleSlug),
                bundle_name: eval($bundleSlug),
                product_id: _data2.product_id,
                variant_id: _data2.id,
                name: _name,
                subtitle: _data2.title.split("-")[0],
                price: _data2.price,
                qty: eval($bundleObj + "[" + index + "].qty"),
                weight: _data2.weight,
                img: _img,
                sku: null === _data2.sku ? "" : _data2.sku,
                type: "bundle",
              });
          } else gu_checkout.removeProduct(value);
        });
    }
    var viewModel = new ViewModel(),
      theCart = new CartController(),
      $offer = ".main-visible-offer",
      $activeOfferName = window.gu_qs.guoffer,
      $additionalOffer =
        $activeOfferName && void 0 !== multi_bundleData
          ? "#" + $activeOfferName
          : $offer,
      $selectedBundle = $additionalOffer + "  .bundle.selected",
      $offerData =
        void 0 !== multi_bundleData
          ? multi_bundleData
          : componentOffer.bundle_info,
      $bundleIndex = '$($selectedBundle).data("index") - 1',
      $bundleData = "$offerData[eval($bundleIndex)]",
      $bundleObj = $bundleData + ".bundle_object",
      $bundleSlug = $bundleData + ".bundle_slug",
      $variantsLoc = "bundle_variant_info.variants",
      $variants = $bundleObj + "[0]." + $variantsLoc,
      $variantImages = $bundleObj + "[0].bundle_variant_info.images",
      $label = $bundleObj + "[0].bundle_variant_info.title",
      $tags = $bundleObj + "[0].bundle_variant_info.tags",
      $excludedVariants = site_vars.excluded_variants.split(","),
      $variantDescriptions = site_vars.variant_descriptions,
      $activeClass = "active",
      $galleryDirectory = templateUrl.theme_directory,
      $vs = "#variant-selector",
      $title = $vs + " .title",
      $type = $bundleObj + "[0].bundle_variant_info.options[0].name",
      $colorsEl = $vs + " #vsc-colors",
      $colorsTitle = "h6",
      $colorImage = ".product-image",
      $colorsCircle = ".circle",
      $colorsClass = "color",
      $colorsWrap = $colorsEl + " .colors",
      $colors = $colorsWrap + " ." + $colorsClass,
      $colorSampleHTML = $("<div />").append($($colors).eq(0).clone()).html(),
      $varietyColorName = "Variety",
      $varietyClass = "variety";
    return {
      data: data,
      click: click,
      check: check,
      update: displayBuilder,
      addonCheck: displayAddon,
      checkRates: variantShippingRates,
    };
  })(),
  disclaimerLoadAttempts = 0;
getBrandConfig(gu_offer);
